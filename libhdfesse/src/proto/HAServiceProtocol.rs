// This file is generated by rust-protobuf 2.20.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `HAServiceProtocol.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_20_0;

#[derive(PartialEq,Clone,Default)]
pub struct HAStateChangeRequestInfoProto {
    // message fields
    reqSource: ::std::option::Option<HARequestSource>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HAStateChangeRequestInfoProto {
    fn default() -> &'a HAStateChangeRequestInfoProto {
        <HAStateChangeRequestInfoProto as ::protobuf::Message>::default_instance()
    }
}

impl HAStateChangeRequestInfoProto {
    pub fn new() -> HAStateChangeRequestInfoProto {
        ::std::default::Default::default()
    }

    // required .hadoop.common.HARequestSource reqSource = 1;


    pub fn get_reqSource(&self) -> HARequestSource {
        self.reqSource.unwrap_or(HARequestSource::REQUEST_BY_USER)
    }
    pub fn clear_reqSource(&mut self) {
        self.reqSource = ::std::option::Option::None;
    }

    pub fn has_reqSource(&self) -> bool {
        self.reqSource.is_some()
    }

    // Param is passed by value, moved
    pub fn set_reqSource(&mut self, v: HARequestSource) {
        self.reqSource = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for HAStateChangeRequestInfoProto {
    fn is_initialized(&self) -> bool {
        if self.reqSource.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.reqSource, 1, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.reqSource {
            my_size += ::protobuf::rt::enum_size(1, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.reqSource {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&v))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HAStateChangeRequestInfoProto {
        HAStateChangeRequestInfoProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<HARequestSource>>(
                "reqSource",
                |m: &HAStateChangeRequestInfoProto| { &m.reqSource },
                |m: &mut HAStateChangeRequestInfoProto| { &mut m.reqSource },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<HAStateChangeRequestInfoProto>(
                "HAStateChangeRequestInfoProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static HAStateChangeRequestInfoProto {
        static instance: ::protobuf::rt::LazyV2<HAStateChangeRequestInfoProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(HAStateChangeRequestInfoProto::new)
    }
}

impl ::protobuf::Clear for HAStateChangeRequestInfoProto {
    fn clear(&mut self) {
        self.reqSource = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HAStateChangeRequestInfoProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HAStateChangeRequestInfoProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MonitorHealthRequestProto {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MonitorHealthRequestProto {
    fn default() -> &'a MonitorHealthRequestProto {
        <MonitorHealthRequestProto as ::protobuf::Message>::default_instance()
    }
}

impl MonitorHealthRequestProto {
    pub fn new() -> MonitorHealthRequestProto {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for MonitorHealthRequestProto {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MonitorHealthRequestProto {
        MonitorHealthRequestProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MonitorHealthRequestProto>(
                "MonitorHealthRequestProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MonitorHealthRequestProto {
        static instance: ::protobuf::rt::LazyV2<MonitorHealthRequestProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MonitorHealthRequestProto::new)
    }
}

impl ::protobuf::Clear for MonitorHealthRequestProto {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MonitorHealthRequestProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MonitorHealthRequestProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MonitorHealthResponseProto {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MonitorHealthResponseProto {
    fn default() -> &'a MonitorHealthResponseProto {
        <MonitorHealthResponseProto as ::protobuf::Message>::default_instance()
    }
}

impl MonitorHealthResponseProto {
    pub fn new() -> MonitorHealthResponseProto {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for MonitorHealthResponseProto {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MonitorHealthResponseProto {
        MonitorHealthResponseProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MonitorHealthResponseProto>(
                "MonitorHealthResponseProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MonitorHealthResponseProto {
        static instance: ::protobuf::rt::LazyV2<MonitorHealthResponseProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MonitorHealthResponseProto::new)
    }
}

impl ::protobuf::Clear for MonitorHealthResponseProto {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MonitorHealthResponseProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MonitorHealthResponseProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TransitionToActiveRequestProto {
    // message fields
    pub reqInfo: ::protobuf::SingularPtrField<HAStateChangeRequestInfoProto>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TransitionToActiveRequestProto {
    fn default() -> &'a TransitionToActiveRequestProto {
        <TransitionToActiveRequestProto as ::protobuf::Message>::default_instance()
    }
}

impl TransitionToActiveRequestProto {
    pub fn new() -> TransitionToActiveRequestProto {
        ::std::default::Default::default()
    }

    // required .hadoop.common.HAStateChangeRequestInfoProto reqInfo = 1;


    pub fn get_reqInfo(&self) -> &HAStateChangeRequestInfoProto {
        self.reqInfo.as_ref().unwrap_or_else(|| <HAStateChangeRequestInfoProto as ::protobuf::Message>::default_instance())
    }
    pub fn clear_reqInfo(&mut self) {
        self.reqInfo.clear();
    }

    pub fn has_reqInfo(&self) -> bool {
        self.reqInfo.is_some()
    }

    // Param is passed by value, moved
    pub fn set_reqInfo(&mut self, v: HAStateChangeRequestInfoProto) {
        self.reqInfo = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_reqInfo(&mut self) -> &mut HAStateChangeRequestInfoProto {
        if self.reqInfo.is_none() {
            self.reqInfo.set_default();
        }
        self.reqInfo.as_mut().unwrap()
    }

    // Take field
    pub fn take_reqInfo(&mut self) -> HAStateChangeRequestInfoProto {
        self.reqInfo.take().unwrap_or_else(|| HAStateChangeRequestInfoProto::new())
    }
}

impl ::protobuf::Message for TransitionToActiveRequestProto {
    fn is_initialized(&self) -> bool {
        if self.reqInfo.is_none() {
            return false;
        }
        for v in &self.reqInfo {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.reqInfo)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.reqInfo.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.reqInfo.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TransitionToActiveRequestProto {
        TransitionToActiveRequestProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<HAStateChangeRequestInfoProto>>(
                "reqInfo",
                |m: &TransitionToActiveRequestProto| { &m.reqInfo },
                |m: &mut TransitionToActiveRequestProto| { &mut m.reqInfo },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TransitionToActiveRequestProto>(
                "TransitionToActiveRequestProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TransitionToActiveRequestProto {
        static instance: ::protobuf::rt::LazyV2<TransitionToActiveRequestProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TransitionToActiveRequestProto::new)
    }
}

impl ::protobuf::Clear for TransitionToActiveRequestProto {
    fn clear(&mut self) {
        self.reqInfo.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TransitionToActiveRequestProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TransitionToActiveRequestProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TransitionToActiveResponseProto {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TransitionToActiveResponseProto {
    fn default() -> &'a TransitionToActiveResponseProto {
        <TransitionToActiveResponseProto as ::protobuf::Message>::default_instance()
    }
}

impl TransitionToActiveResponseProto {
    pub fn new() -> TransitionToActiveResponseProto {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for TransitionToActiveResponseProto {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TransitionToActiveResponseProto {
        TransitionToActiveResponseProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TransitionToActiveResponseProto>(
                "TransitionToActiveResponseProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TransitionToActiveResponseProto {
        static instance: ::protobuf::rt::LazyV2<TransitionToActiveResponseProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TransitionToActiveResponseProto::new)
    }
}

impl ::protobuf::Clear for TransitionToActiveResponseProto {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TransitionToActiveResponseProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TransitionToActiveResponseProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TransitionToStandbyRequestProto {
    // message fields
    pub reqInfo: ::protobuf::SingularPtrField<HAStateChangeRequestInfoProto>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TransitionToStandbyRequestProto {
    fn default() -> &'a TransitionToStandbyRequestProto {
        <TransitionToStandbyRequestProto as ::protobuf::Message>::default_instance()
    }
}

impl TransitionToStandbyRequestProto {
    pub fn new() -> TransitionToStandbyRequestProto {
        ::std::default::Default::default()
    }

    // required .hadoop.common.HAStateChangeRequestInfoProto reqInfo = 1;


    pub fn get_reqInfo(&self) -> &HAStateChangeRequestInfoProto {
        self.reqInfo.as_ref().unwrap_or_else(|| <HAStateChangeRequestInfoProto as ::protobuf::Message>::default_instance())
    }
    pub fn clear_reqInfo(&mut self) {
        self.reqInfo.clear();
    }

    pub fn has_reqInfo(&self) -> bool {
        self.reqInfo.is_some()
    }

    // Param is passed by value, moved
    pub fn set_reqInfo(&mut self, v: HAStateChangeRequestInfoProto) {
        self.reqInfo = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_reqInfo(&mut self) -> &mut HAStateChangeRequestInfoProto {
        if self.reqInfo.is_none() {
            self.reqInfo.set_default();
        }
        self.reqInfo.as_mut().unwrap()
    }

    // Take field
    pub fn take_reqInfo(&mut self) -> HAStateChangeRequestInfoProto {
        self.reqInfo.take().unwrap_or_else(|| HAStateChangeRequestInfoProto::new())
    }
}

impl ::protobuf::Message for TransitionToStandbyRequestProto {
    fn is_initialized(&self) -> bool {
        if self.reqInfo.is_none() {
            return false;
        }
        for v in &self.reqInfo {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.reqInfo)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.reqInfo.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.reqInfo.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TransitionToStandbyRequestProto {
        TransitionToStandbyRequestProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<HAStateChangeRequestInfoProto>>(
                "reqInfo",
                |m: &TransitionToStandbyRequestProto| { &m.reqInfo },
                |m: &mut TransitionToStandbyRequestProto| { &mut m.reqInfo },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TransitionToStandbyRequestProto>(
                "TransitionToStandbyRequestProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TransitionToStandbyRequestProto {
        static instance: ::protobuf::rt::LazyV2<TransitionToStandbyRequestProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TransitionToStandbyRequestProto::new)
    }
}

impl ::protobuf::Clear for TransitionToStandbyRequestProto {
    fn clear(&mut self) {
        self.reqInfo.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TransitionToStandbyRequestProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TransitionToStandbyRequestProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TransitionToStandbyResponseProto {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TransitionToStandbyResponseProto {
    fn default() -> &'a TransitionToStandbyResponseProto {
        <TransitionToStandbyResponseProto as ::protobuf::Message>::default_instance()
    }
}

impl TransitionToStandbyResponseProto {
    pub fn new() -> TransitionToStandbyResponseProto {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for TransitionToStandbyResponseProto {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TransitionToStandbyResponseProto {
        TransitionToStandbyResponseProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TransitionToStandbyResponseProto>(
                "TransitionToStandbyResponseProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TransitionToStandbyResponseProto {
        static instance: ::protobuf::rt::LazyV2<TransitionToStandbyResponseProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TransitionToStandbyResponseProto::new)
    }
}

impl ::protobuf::Clear for TransitionToStandbyResponseProto {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TransitionToStandbyResponseProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TransitionToStandbyResponseProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TransitionToObserverRequestProto {
    // message fields
    pub reqInfo: ::protobuf::SingularPtrField<HAStateChangeRequestInfoProto>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TransitionToObserverRequestProto {
    fn default() -> &'a TransitionToObserverRequestProto {
        <TransitionToObserverRequestProto as ::protobuf::Message>::default_instance()
    }
}

impl TransitionToObserverRequestProto {
    pub fn new() -> TransitionToObserverRequestProto {
        ::std::default::Default::default()
    }

    // required .hadoop.common.HAStateChangeRequestInfoProto reqInfo = 1;


    pub fn get_reqInfo(&self) -> &HAStateChangeRequestInfoProto {
        self.reqInfo.as_ref().unwrap_or_else(|| <HAStateChangeRequestInfoProto as ::protobuf::Message>::default_instance())
    }
    pub fn clear_reqInfo(&mut self) {
        self.reqInfo.clear();
    }

    pub fn has_reqInfo(&self) -> bool {
        self.reqInfo.is_some()
    }

    // Param is passed by value, moved
    pub fn set_reqInfo(&mut self, v: HAStateChangeRequestInfoProto) {
        self.reqInfo = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_reqInfo(&mut self) -> &mut HAStateChangeRequestInfoProto {
        if self.reqInfo.is_none() {
            self.reqInfo.set_default();
        }
        self.reqInfo.as_mut().unwrap()
    }

    // Take field
    pub fn take_reqInfo(&mut self) -> HAStateChangeRequestInfoProto {
        self.reqInfo.take().unwrap_or_else(|| HAStateChangeRequestInfoProto::new())
    }
}

impl ::protobuf::Message for TransitionToObserverRequestProto {
    fn is_initialized(&self) -> bool {
        if self.reqInfo.is_none() {
            return false;
        }
        for v in &self.reqInfo {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.reqInfo)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.reqInfo.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.reqInfo.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TransitionToObserverRequestProto {
        TransitionToObserverRequestProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<HAStateChangeRequestInfoProto>>(
                "reqInfo",
                |m: &TransitionToObserverRequestProto| { &m.reqInfo },
                |m: &mut TransitionToObserverRequestProto| { &mut m.reqInfo },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TransitionToObserverRequestProto>(
                "TransitionToObserverRequestProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TransitionToObserverRequestProto {
        static instance: ::protobuf::rt::LazyV2<TransitionToObserverRequestProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TransitionToObserverRequestProto::new)
    }
}

impl ::protobuf::Clear for TransitionToObserverRequestProto {
    fn clear(&mut self) {
        self.reqInfo.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TransitionToObserverRequestProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TransitionToObserverRequestProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TransitionToObserverResponseProto {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TransitionToObserverResponseProto {
    fn default() -> &'a TransitionToObserverResponseProto {
        <TransitionToObserverResponseProto as ::protobuf::Message>::default_instance()
    }
}

impl TransitionToObserverResponseProto {
    pub fn new() -> TransitionToObserverResponseProto {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for TransitionToObserverResponseProto {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TransitionToObserverResponseProto {
        TransitionToObserverResponseProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TransitionToObserverResponseProto>(
                "TransitionToObserverResponseProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TransitionToObserverResponseProto {
        static instance: ::protobuf::rt::LazyV2<TransitionToObserverResponseProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TransitionToObserverResponseProto::new)
    }
}

impl ::protobuf::Clear for TransitionToObserverResponseProto {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TransitionToObserverResponseProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TransitionToObserverResponseProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetServiceStatusRequestProto {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetServiceStatusRequestProto {
    fn default() -> &'a GetServiceStatusRequestProto {
        <GetServiceStatusRequestProto as ::protobuf::Message>::default_instance()
    }
}

impl GetServiceStatusRequestProto {
    pub fn new() -> GetServiceStatusRequestProto {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for GetServiceStatusRequestProto {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetServiceStatusRequestProto {
        GetServiceStatusRequestProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetServiceStatusRequestProto>(
                "GetServiceStatusRequestProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetServiceStatusRequestProto {
        static instance: ::protobuf::rt::LazyV2<GetServiceStatusRequestProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetServiceStatusRequestProto::new)
    }
}

impl ::protobuf::Clear for GetServiceStatusRequestProto {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetServiceStatusRequestProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetServiceStatusRequestProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetServiceStatusResponseProto {
    // message fields
    state: ::std::option::Option<HAServiceStateProto>,
    readyToBecomeActive: ::std::option::Option<bool>,
    notReadyReason: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetServiceStatusResponseProto {
    fn default() -> &'a GetServiceStatusResponseProto {
        <GetServiceStatusResponseProto as ::protobuf::Message>::default_instance()
    }
}

impl GetServiceStatusResponseProto {
    pub fn new() -> GetServiceStatusResponseProto {
        ::std::default::Default::default()
    }

    // required .hadoop.common.HAServiceStateProto state = 1;


    pub fn get_state(&self) -> HAServiceStateProto {
        self.state.unwrap_or(HAServiceStateProto::INITIALIZING)
    }
    pub fn clear_state(&mut self) {
        self.state = ::std::option::Option::None;
    }

    pub fn has_state(&self) -> bool {
        self.state.is_some()
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: HAServiceStateProto) {
        self.state = ::std::option::Option::Some(v);
    }

    // optional bool readyToBecomeActive = 2;


    pub fn get_readyToBecomeActive(&self) -> bool {
        self.readyToBecomeActive.unwrap_or(false)
    }
    pub fn clear_readyToBecomeActive(&mut self) {
        self.readyToBecomeActive = ::std::option::Option::None;
    }

    pub fn has_readyToBecomeActive(&self) -> bool {
        self.readyToBecomeActive.is_some()
    }

    // Param is passed by value, moved
    pub fn set_readyToBecomeActive(&mut self, v: bool) {
        self.readyToBecomeActive = ::std::option::Option::Some(v);
    }

    // optional string notReadyReason = 3;


    pub fn get_notReadyReason(&self) -> &str {
        match self.notReadyReason.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_notReadyReason(&mut self) {
        self.notReadyReason.clear();
    }

    pub fn has_notReadyReason(&self) -> bool {
        self.notReadyReason.is_some()
    }

    // Param is passed by value, moved
    pub fn set_notReadyReason(&mut self, v: ::std::string::String) {
        self.notReadyReason = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_notReadyReason(&mut self) -> &mut ::std::string::String {
        if self.notReadyReason.is_none() {
            self.notReadyReason.set_default();
        }
        self.notReadyReason.as_mut().unwrap()
    }

    // Take field
    pub fn take_notReadyReason(&mut self) -> ::std::string::String {
        self.notReadyReason.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for GetServiceStatusResponseProto {
    fn is_initialized(&self) -> bool {
        if self.state.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.state, 1, &mut self.unknown_fields)?
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.readyToBecomeActive = ::std::option::Option::Some(tmp);
                },
                3 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.notReadyReason)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.state {
            my_size += ::protobuf::rt::enum_size(1, v);
        }
        if let Some(v) = self.readyToBecomeActive {
            my_size += 2;
        }
        if let Some(ref v) = self.notReadyReason.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.state {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&v))?;
        }
        if let Some(v) = self.readyToBecomeActive {
            os.write_bool(2, v)?;
        }
        if let Some(ref v) = self.notReadyReason.as_ref() {
            os.write_string(3, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetServiceStatusResponseProto {
        GetServiceStatusResponseProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<HAServiceStateProto>>(
                "state",
                |m: &GetServiceStatusResponseProto| { &m.state },
                |m: &mut GetServiceStatusResponseProto| { &mut m.state },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "readyToBecomeActive",
                |m: &GetServiceStatusResponseProto| { &m.readyToBecomeActive },
                |m: &mut GetServiceStatusResponseProto| { &mut m.readyToBecomeActive },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "notReadyReason",
                |m: &GetServiceStatusResponseProto| { &m.notReadyReason },
                |m: &mut GetServiceStatusResponseProto| { &mut m.notReadyReason },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetServiceStatusResponseProto>(
                "GetServiceStatusResponseProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetServiceStatusResponseProto {
        static instance: ::protobuf::rt::LazyV2<GetServiceStatusResponseProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetServiceStatusResponseProto::new)
    }
}

impl ::protobuf::Clear for GetServiceStatusResponseProto {
    fn clear(&mut self) {
        self.state = ::std::option::Option::None;
        self.readyToBecomeActive = ::std::option::Option::None;
        self.notReadyReason.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetServiceStatusResponseProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetServiceStatusResponseProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum HAServiceStateProto {
    INITIALIZING = 0,
    ACTIVE = 1,
    STANDBY = 2,
    OBSERVER = 3,
}

impl ::protobuf::ProtobufEnum for HAServiceStateProto {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<HAServiceStateProto> {
        match value {
            0 => ::std::option::Option::Some(HAServiceStateProto::INITIALIZING),
            1 => ::std::option::Option::Some(HAServiceStateProto::ACTIVE),
            2 => ::std::option::Option::Some(HAServiceStateProto::STANDBY),
            3 => ::std::option::Option::Some(HAServiceStateProto::OBSERVER),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [HAServiceStateProto] = &[
            HAServiceStateProto::INITIALIZING,
            HAServiceStateProto::ACTIVE,
            HAServiceStateProto::STANDBY,
            HAServiceStateProto::OBSERVER,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<HAServiceStateProto>("HAServiceStateProto", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for HAServiceStateProto {
}

impl ::std::default::Default for HAServiceStateProto {
    fn default() -> Self {
        HAServiceStateProto::INITIALIZING
    }
}

impl ::protobuf::reflect::ProtobufValue for HAServiceStateProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum HARequestSource {
    REQUEST_BY_USER = 0,
    REQUEST_BY_USER_FORCED = 1,
    REQUEST_BY_ZKFC = 2,
}

impl ::protobuf::ProtobufEnum for HARequestSource {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<HARequestSource> {
        match value {
            0 => ::std::option::Option::Some(HARequestSource::REQUEST_BY_USER),
            1 => ::std::option::Option::Some(HARequestSource::REQUEST_BY_USER_FORCED),
            2 => ::std::option::Option::Some(HARequestSource::REQUEST_BY_ZKFC),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [HARequestSource] = &[
            HARequestSource::REQUEST_BY_USER,
            HARequestSource::REQUEST_BY_USER_FORCED,
            HARequestSource::REQUEST_BY_ZKFC,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<HARequestSource>("HARequestSource", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for HARequestSource {
}

impl ::std::default::Default for HARequestSource {
    fn default() -> Self {
        HARequestSource::REQUEST_BY_USER
    }
}

impl ::protobuf::reflect::ProtobufValue for HARequestSource {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x17HAServiceProtocol.proto\x12\rhadoop.common\"]\n\x1dHAStateChangeRe\
    questInfoProto\x12<\n\treqSource\x18\x01\x20\x02(\x0e2\x1e.hadoop.common\
    .HARequestSourceR\treqSource\"\x1b\n\x19MonitorHealthRequestProto\"\x1c\
    \n\x1aMonitorHealthResponseProto\"h\n\x1eTransitionToActiveRequestProto\
    \x12F\n\x07reqInfo\x18\x01\x20\x02(\x0b2,.hadoop.common.HAStateChangeReq\
    uestInfoProtoR\x07reqInfo\"!\n\x1fTransitionToActiveResponseProto\"i\n\
    \x1fTransitionToStandbyRequestProto\x12F\n\x07reqInfo\x18\x01\x20\x02(\
    \x0b2,.hadoop.common.HAStateChangeRequestInfoProtoR\x07reqInfo\"\"\n\x20\
    TransitionToStandbyResponseProto\"j\n\x20TransitionToObserverRequestProt\
    o\x12F\n\x07reqInfo\x18\x01\x20\x02(\x0b2,.hadoop.common.HAStateChangeRe\
    questInfoProtoR\x07reqInfo\"#\n!TransitionToObserverResponseProto\"\x1e\
    \n\x1cGetServiceStatusRequestProto\"\xb3\x01\n\x1dGetServiceStatusRespon\
    seProto\x128\n\x05state\x18\x01\x20\x02(\x0e2\".hadoop.common.HAServiceS\
    tateProtoR\x05state\x120\n\x13readyToBecomeActive\x18\x02\x20\x01(\x08R\
    \x13readyToBecomeActive\x12&\n\x0enotReadyReason\x18\x03\x20\x01(\tR\x0e\
    notReadyReason*N\n\x13HAServiceStateProto\x12\x10\n\x0cINITIALIZING\x10\
    \0\x12\n\n\x06ACTIVE\x10\x01\x12\x0b\n\x07STANDBY\x10\x02\x12\x0c\n\x08O\
    BSERVER\x10\x03*W\n\x0fHARequestSource\x12\x13\n\x0fREQUEST_BY_USER\x10\
    \0\x12\x1a\n\x16REQUEST_BY_USER_FORCED\x10\x01\x12\x13\n\x0fREQUEST_BY_Z\
    KFC\x10\x022\xd7\x04\n\x18HAServiceProtocolService\x12d\n\rmonitorHealth\
    \x12(.hadoop.common.MonitorHealthRequestProto\x1a).hadoop.common.Monitor\
    HealthResponseProto\x12s\n\x12transitionToActive\x12-.hadoop.common.Tran\
    sitionToActiveRequestProto\x1a..hadoop.common.TransitionToActiveResponse\
    Proto\x12v\n\x13transitionToStandby\x12..hadoop.common.TransitionToStand\
    byRequestProto\x1a/.hadoop.common.TransitionToStandbyResponseProto\x12y\
    \n\x14transitionToObserver\x12/.hadoop.common.TransitionToObserverReques\
    tProto\x1a0.hadoop.common.TransitionToObserverResponseProto\x12m\n\x10ge\
    tServiceStatus\x12+.hadoop.common.GetServiceStatusRequestProto\x1a,.hado\
    op.common.GetServiceStatusResponseProtoB;\n\x1aorg.apache.hadoop.ha.prot\
    oB\x17HAServiceProtocolProtos\xa0\x01\x01\x88\x01\x01\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
