// This file is generated by rust-protobuf 2.23.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `RpcHeader.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_23_0;

#[derive(PartialEq,Clone,Default)]
pub struct RPCTraceInfoProto {
    // message fields
    traceId: ::std::option::Option<i64>,
    parentId: ::std::option::Option<i64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RPCTraceInfoProto {
    fn default() -> &'a RPCTraceInfoProto {
        <RPCTraceInfoProto as ::protobuf::Message>::default_instance()
    }
}

impl RPCTraceInfoProto {
    pub fn new() -> RPCTraceInfoProto {
        ::std::default::Default::default()
    }

    // optional int64 traceId = 1;


    pub fn get_traceId(&self) -> i64 {
        self.traceId.unwrap_or(0)
    }
    pub fn clear_traceId(&mut self) {
        self.traceId = ::std::option::Option::None;
    }

    pub fn has_traceId(&self) -> bool {
        self.traceId.is_some()
    }

    // Param is passed by value, moved
    pub fn set_traceId(&mut self, v: i64) {
        self.traceId = ::std::option::Option::Some(v);
    }

    // optional int64 parentId = 2;


    pub fn get_parentId(&self) -> i64 {
        self.parentId.unwrap_or(0)
    }
    pub fn clear_parentId(&mut self) {
        self.parentId = ::std::option::Option::None;
    }

    pub fn has_parentId(&self) -> bool {
        self.parentId.is_some()
    }

    // Param is passed by value, moved
    pub fn set_parentId(&mut self, v: i64) {
        self.parentId = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for RPCTraceInfoProto {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.traceId = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.parentId = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.traceId {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.parentId {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.traceId {
            os.write_int64(1, v)?;
        }
        if let Some(v) = self.parentId {
            os.write_int64(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RPCTraceInfoProto {
        RPCTraceInfoProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "traceId",
                |m: &RPCTraceInfoProto| { &m.traceId },
                |m: &mut RPCTraceInfoProto| { &mut m.traceId },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "parentId",
                |m: &RPCTraceInfoProto| { &m.parentId },
                |m: &mut RPCTraceInfoProto| { &mut m.parentId },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RPCTraceInfoProto>(
                "RPCTraceInfoProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RPCTraceInfoProto {
        static instance: ::protobuf::rt::LazyV2<RPCTraceInfoProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RPCTraceInfoProto::new)
    }
}

impl ::protobuf::Clear for RPCTraceInfoProto {
    fn clear(&mut self) {
        self.traceId = ::std::option::Option::None;
        self.parentId = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RPCTraceInfoProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RPCTraceInfoProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RPCCallerContextProto {
    // message fields
    context: ::protobuf::SingularField<::std::string::String>,
    signature: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RPCCallerContextProto {
    fn default() -> &'a RPCCallerContextProto {
        <RPCCallerContextProto as ::protobuf::Message>::default_instance()
    }
}

impl RPCCallerContextProto {
    pub fn new() -> RPCCallerContextProto {
        ::std::default::Default::default()
    }

    // required string context = 1;


    pub fn get_context(&self) -> &str {
        match self.context.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_context(&mut self) {
        self.context.clear();
    }

    pub fn has_context(&self) -> bool {
        self.context.is_some()
    }

    // Param is passed by value, moved
    pub fn set_context(&mut self, v: ::std::string::String) {
        self.context = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_context(&mut self) -> &mut ::std::string::String {
        if self.context.is_none() {
            self.context.set_default();
        }
        self.context.as_mut().unwrap()
    }

    // Take field
    pub fn take_context(&mut self) -> ::std::string::String {
        self.context.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bytes signature = 2;


    pub fn get_signature(&self) -> &[u8] {
        match self.signature.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_signature(&mut self) {
        self.signature.clear();
    }

    pub fn has_signature(&self) -> bool {
        self.signature.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: ::std::vec::Vec<u8>) {
        self.signature = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.signature.is_none() {
            self.signature.set_default();
        }
        self.signature.as_mut().unwrap()
    }

    // Take field
    pub fn take_signature(&mut self) -> ::std::vec::Vec<u8> {
        self.signature.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for RPCCallerContextProto {
    fn is_initialized(&self) -> bool {
        if self.context.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.context)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.signature)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.context.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(ref v) = self.signature.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.context.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(ref v) = self.signature.as_ref() {
            os.write_bytes(2, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RPCCallerContextProto {
        RPCCallerContextProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "context",
                |m: &RPCCallerContextProto| { &m.context },
                |m: &mut RPCCallerContextProto| { &mut m.context },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "signature",
                |m: &RPCCallerContextProto| { &m.signature },
                |m: &mut RPCCallerContextProto| { &mut m.signature },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RPCCallerContextProto>(
                "RPCCallerContextProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RPCCallerContextProto {
        static instance: ::protobuf::rt::LazyV2<RPCCallerContextProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RPCCallerContextProto::new)
    }
}

impl ::protobuf::Clear for RPCCallerContextProto {
    fn clear(&mut self) {
        self.context.clear();
        self.signature.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RPCCallerContextProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RPCCallerContextProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RpcRequestHeaderProto {
    // message fields
    rpcKind: ::std::option::Option<RpcKindProto>,
    rpcOp: ::std::option::Option<RpcRequestHeaderProto_OperationProto>,
    callId: ::std::option::Option<i32>,
    clientId: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    retryCount: ::std::option::Option<i32>,
    pub traceInfo: ::protobuf::SingularPtrField<RPCTraceInfoProto>,
    pub callerContext: ::protobuf::SingularPtrField<RPCCallerContextProto>,
    stateId: ::std::option::Option<i64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RpcRequestHeaderProto {
    fn default() -> &'a RpcRequestHeaderProto {
        <RpcRequestHeaderProto as ::protobuf::Message>::default_instance()
    }
}

impl RpcRequestHeaderProto {
    pub fn new() -> RpcRequestHeaderProto {
        ::std::default::Default::default()
    }

    // optional .hadoop.common.RpcKindProto rpcKind = 1;


    pub fn get_rpcKind(&self) -> RpcKindProto {
        self.rpcKind.unwrap_or(RpcKindProto::RPC_BUILTIN)
    }
    pub fn clear_rpcKind(&mut self) {
        self.rpcKind = ::std::option::Option::None;
    }

    pub fn has_rpcKind(&self) -> bool {
        self.rpcKind.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rpcKind(&mut self, v: RpcKindProto) {
        self.rpcKind = ::std::option::Option::Some(v);
    }

    // optional .hadoop.common.RpcRequestHeaderProto.OperationProto rpcOp = 2;


    pub fn get_rpcOp(&self) -> RpcRequestHeaderProto_OperationProto {
        self.rpcOp.unwrap_or(RpcRequestHeaderProto_OperationProto::RPC_FINAL_PACKET)
    }
    pub fn clear_rpcOp(&mut self) {
        self.rpcOp = ::std::option::Option::None;
    }

    pub fn has_rpcOp(&self) -> bool {
        self.rpcOp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rpcOp(&mut self, v: RpcRequestHeaderProto_OperationProto) {
        self.rpcOp = ::std::option::Option::Some(v);
    }

    // required sint32 callId = 3;


    pub fn get_callId(&self) -> i32 {
        self.callId.unwrap_or(0)
    }
    pub fn clear_callId(&mut self) {
        self.callId = ::std::option::Option::None;
    }

    pub fn has_callId(&self) -> bool {
        self.callId.is_some()
    }

    // Param is passed by value, moved
    pub fn set_callId(&mut self, v: i32) {
        self.callId = ::std::option::Option::Some(v);
    }

    // required bytes clientId = 4;


    pub fn get_clientId(&self) -> &[u8] {
        match self.clientId.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_clientId(&mut self) {
        self.clientId.clear();
    }

    pub fn has_clientId(&self) -> bool {
        self.clientId.is_some()
    }

    // Param is passed by value, moved
    pub fn set_clientId(&mut self, v: ::std::vec::Vec<u8>) {
        self.clientId = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_clientId(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.clientId.is_none() {
            self.clientId.set_default();
        }
        self.clientId.as_mut().unwrap()
    }

    // Take field
    pub fn take_clientId(&mut self) -> ::std::vec::Vec<u8> {
        self.clientId.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional sint32 retryCount = 5;


    pub fn get_retryCount(&self) -> i32 {
        self.retryCount.unwrap_or(-1i32)
    }
    pub fn clear_retryCount(&mut self) {
        self.retryCount = ::std::option::Option::None;
    }

    pub fn has_retryCount(&self) -> bool {
        self.retryCount.is_some()
    }

    // Param is passed by value, moved
    pub fn set_retryCount(&mut self, v: i32) {
        self.retryCount = ::std::option::Option::Some(v);
    }

    // optional .hadoop.common.RPCTraceInfoProto traceInfo = 6;


    pub fn get_traceInfo(&self) -> &RPCTraceInfoProto {
        self.traceInfo.as_ref().unwrap_or_else(|| <RPCTraceInfoProto as ::protobuf::Message>::default_instance())
    }
    pub fn clear_traceInfo(&mut self) {
        self.traceInfo.clear();
    }

    pub fn has_traceInfo(&self) -> bool {
        self.traceInfo.is_some()
    }

    // Param is passed by value, moved
    pub fn set_traceInfo(&mut self, v: RPCTraceInfoProto) {
        self.traceInfo = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_traceInfo(&mut self) -> &mut RPCTraceInfoProto {
        if self.traceInfo.is_none() {
            self.traceInfo.set_default();
        }
        self.traceInfo.as_mut().unwrap()
    }

    // Take field
    pub fn take_traceInfo(&mut self) -> RPCTraceInfoProto {
        self.traceInfo.take().unwrap_or_else(|| RPCTraceInfoProto::new())
    }

    // optional .hadoop.common.RPCCallerContextProto callerContext = 7;


    pub fn get_callerContext(&self) -> &RPCCallerContextProto {
        self.callerContext.as_ref().unwrap_or_else(|| <RPCCallerContextProto as ::protobuf::Message>::default_instance())
    }
    pub fn clear_callerContext(&mut self) {
        self.callerContext.clear();
    }

    pub fn has_callerContext(&self) -> bool {
        self.callerContext.is_some()
    }

    // Param is passed by value, moved
    pub fn set_callerContext(&mut self, v: RPCCallerContextProto) {
        self.callerContext = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_callerContext(&mut self) -> &mut RPCCallerContextProto {
        if self.callerContext.is_none() {
            self.callerContext.set_default();
        }
        self.callerContext.as_mut().unwrap()
    }

    // Take field
    pub fn take_callerContext(&mut self) -> RPCCallerContextProto {
        self.callerContext.take().unwrap_or_else(|| RPCCallerContextProto::new())
    }

    // optional int64 stateId = 8;


    pub fn get_stateId(&self) -> i64 {
        self.stateId.unwrap_or(0)
    }
    pub fn clear_stateId(&mut self) {
        self.stateId = ::std::option::Option::None;
    }

    pub fn has_stateId(&self) -> bool {
        self.stateId.is_some()
    }

    // Param is passed by value, moved
    pub fn set_stateId(&mut self, v: i64) {
        self.stateId = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for RpcRequestHeaderProto {
    fn is_initialized(&self) -> bool {
        if self.callId.is_none() {
            return false;
        }
        if self.clientId.is_none() {
            return false;
        }
        for v in &self.traceInfo {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.callerContext {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.rpcKind, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.rpcOp, 2, &mut self.unknown_fields)?
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sint32()?;
                    self.callId = ::std::option::Option::Some(tmp);
                },
                4 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.clientId)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sint32()?;
                    self.retryCount = ::std::option::Option::Some(tmp);
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.traceInfo)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.callerContext)?;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.stateId = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.rpcKind {
            my_size += ::protobuf::rt::enum_size(1, v);
        }
        if let Some(v) = self.rpcOp {
            my_size += ::protobuf::rt::enum_size(2, v);
        }
        if let Some(v) = self.callId {
            my_size += ::protobuf::rt::value_varint_zigzag_size(3, v);
        }
        if let Some(ref v) = self.clientId.as_ref() {
            my_size += ::protobuf::rt::bytes_size(4, &v);
        }
        if let Some(v) = self.retryCount {
            my_size += ::protobuf::rt::value_varint_zigzag_size(5, v);
        }
        if let Some(ref v) = self.traceInfo.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.callerContext.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(v) = self.stateId {
            my_size += ::protobuf::rt::value_size(8, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.rpcKind {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&v))?;
        }
        if let Some(v) = self.rpcOp {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&v))?;
        }
        if let Some(v) = self.callId {
            os.write_sint32(3, v)?;
        }
        if let Some(ref v) = self.clientId.as_ref() {
            os.write_bytes(4, &v)?;
        }
        if let Some(v) = self.retryCount {
            os.write_sint32(5, v)?;
        }
        if let Some(ref v) = self.traceInfo.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.callerContext.as_ref() {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(v) = self.stateId {
            os.write_int64(8, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RpcRequestHeaderProto {
        RpcRequestHeaderProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<RpcKindProto>>(
                "rpcKind",
                |m: &RpcRequestHeaderProto| { &m.rpcKind },
                |m: &mut RpcRequestHeaderProto| { &mut m.rpcKind },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<RpcRequestHeaderProto_OperationProto>>(
                "rpcOp",
                |m: &RpcRequestHeaderProto| { &m.rpcOp },
                |m: &mut RpcRequestHeaderProto| { &mut m.rpcOp },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeSint32>(
                "callId",
                |m: &RpcRequestHeaderProto| { &m.callId },
                |m: &mut RpcRequestHeaderProto| { &mut m.callId },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "clientId",
                |m: &RpcRequestHeaderProto| { &m.clientId },
                |m: &mut RpcRequestHeaderProto| { &mut m.clientId },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeSint32>(
                "retryCount",
                |m: &RpcRequestHeaderProto| { &m.retryCount },
                |m: &mut RpcRequestHeaderProto| { &mut m.retryCount },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RPCTraceInfoProto>>(
                "traceInfo",
                |m: &RpcRequestHeaderProto| { &m.traceInfo },
                |m: &mut RpcRequestHeaderProto| { &mut m.traceInfo },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RPCCallerContextProto>>(
                "callerContext",
                |m: &RpcRequestHeaderProto| { &m.callerContext },
                |m: &mut RpcRequestHeaderProto| { &mut m.callerContext },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "stateId",
                |m: &RpcRequestHeaderProto| { &m.stateId },
                |m: &mut RpcRequestHeaderProto| { &mut m.stateId },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RpcRequestHeaderProto>(
                "RpcRequestHeaderProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RpcRequestHeaderProto {
        static instance: ::protobuf::rt::LazyV2<RpcRequestHeaderProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RpcRequestHeaderProto::new)
    }
}

impl ::protobuf::Clear for RpcRequestHeaderProto {
    fn clear(&mut self) {
        self.rpcKind = ::std::option::Option::None;
        self.rpcOp = ::std::option::Option::None;
        self.callId = ::std::option::Option::None;
        self.clientId.clear();
        self.retryCount = ::std::option::Option::None;
        self.traceInfo.clear();
        self.callerContext.clear();
        self.stateId = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RpcRequestHeaderProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RpcRequestHeaderProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum RpcRequestHeaderProto_OperationProto {
    RPC_FINAL_PACKET = 0,
    RPC_CONTINUATION_PACKET = 1,
    RPC_CLOSE_CONNECTION = 2,
}

impl ::protobuf::ProtobufEnum for RpcRequestHeaderProto_OperationProto {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<RpcRequestHeaderProto_OperationProto> {
        match value {
            0 => ::std::option::Option::Some(RpcRequestHeaderProto_OperationProto::RPC_FINAL_PACKET),
            1 => ::std::option::Option::Some(RpcRequestHeaderProto_OperationProto::RPC_CONTINUATION_PACKET),
            2 => ::std::option::Option::Some(RpcRequestHeaderProto_OperationProto::RPC_CLOSE_CONNECTION),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [RpcRequestHeaderProto_OperationProto] = &[
            RpcRequestHeaderProto_OperationProto::RPC_FINAL_PACKET,
            RpcRequestHeaderProto_OperationProto::RPC_CONTINUATION_PACKET,
            RpcRequestHeaderProto_OperationProto::RPC_CLOSE_CONNECTION,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<RpcRequestHeaderProto_OperationProto>("RpcRequestHeaderProto.OperationProto", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for RpcRequestHeaderProto_OperationProto {
}

impl ::std::default::Default for RpcRequestHeaderProto_OperationProto {
    fn default() -> Self {
        RpcRequestHeaderProto_OperationProto::RPC_FINAL_PACKET
    }
}

impl ::protobuf::reflect::ProtobufValue for RpcRequestHeaderProto_OperationProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RpcResponseHeaderProto {
    // message fields
    callId: ::std::option::Option<u32>,
    status: ::std::option::Option<RpcResponseHeaderProto_RpcStatusProto>,
    serverIpcVersionNum: ::std::option::Option<u32>,
    exceptionClassName: ::protobuf::SingularField<::std::string::String>,
    errorMsg: ::protobuf::SingularField<::std::string::String>,
    errorDetail: ::std::option::Option<RpcResponseHeaderProto_RpcErrorCodeProto>,
    clientId: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    retryCount: ::std::option::Option<i32>,
    stateId: ::std::option::Option<i64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RpcResponseHeaderProto {
    fn default() -> &'a RpcResponseHeaderProto {
        <RpcResponseHeaderProto as ::protobuf::Message>::default_instance()
    }
}

impl RpcResponseHeaderProto {
    pub fn new() -> RpcResponseHeaderProto {
        ::std::default::Default::default()
    }

    // required uint32 callId = 1;


    pub fn get_callId(&self) -> u32 {
        self.callId.unwrap_or(0)
    }
    pub fn clear_callId(&mut self) {
        self.callId = ::std::option::Option::None;
    }

    pub fn has_callId(&self) -> bool {
        self.callId.is_some()
    }

    // Param is passed by value, moved
    pub fn set_callId(&mut self, v: u32) {
        self.callId = ::std::option::Option::Some(v);
    }

    // required .hadoop.common.RpcResponseHeaderProto.RpcStatusProto status = 2;


    pub fn get_status(&self) -> RpcResponseHeaderProto_RpcStatusProto {
        self.status.unwrap_or(RpcResponseHeaderProto_RpcStatusProto::SUCCESS)
    }
    pub fn clear_status(&mut self) {
        self.status = ::std::option::Option::None;
    }

    pub fn has_status(&self) -> bool {
        self.status.is_some()
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: RpcResponseHeaderProto_RpcStatusProto) {
        self.status = ::std::option::Option::Some(v);
    }

    // optional uint32 serverIpcVersionNum = 3;


    pub fn get_serverIpcVersionNum(&self) -> u32 {
        self.serverIpcVersionNum.unwrap_or(0)
    }
    pub fn clear_serverIpcVersionNum(&mut self) {
        self.serverIpcVersionNum = ::std::option::Option::None;
    }

    pub fn has_serverIpcVersionNum(&self) -> bool {
        self.serverIpcVersionNum.is_some()
    }

    // Param is passed by value, moved
    pub fn set_serverIpcVersionNum(&mut self, v: u32) {
        self.serverIpcVersionNum = ::std::option::Option::Some(v);
    }

    // optional string exceptionClassName = 4;


    pub fn get_exceptionClassName(&self) -> &str {
        match self.exceptionClassName.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_exceptionClassName(&mut self) {
        self.exceptionClassName.clear();
    }

    pub fn has_exceptionClassName(&self) -> bool {
        self.exceptionClassName.is_some()
    }

    // Param is passed by value, moved
    pub fn set_exceptionClassName(&mut self, v: ::std::string::String) {
        self.exceptionClassName = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_exceptionClassName(&mut self) -> &mut ::std::string::String {
        if self.exceptionClassName.is_none() {
            self.exceptionClassName.set_default();
        }
        self.exceptionClassName.as_mut().unwrap()
    }

    // Take field
    pub fn take_exceptionClassName(&mut self) -> ::std::string::String {
        self.exceptionClassName.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string errorMsg = 5;


    pub fn get_errorMsg(&self) -> &str {
        match self.errorMsg.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_errorMsg(&mut self) {
        self.errorMsg.clear();
    }

    pub fn has_errorMsg(&self) -> bool {
        self.errorMsg.is_some()
    }

    // Param is passed by value, moved
    pub fn set_errorMsg(&mut self, v: ::std::string::String) {
        self.errorMsg = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_errorMsg(&mut self) -> &mut ::std::string::String {
        if self.errorMsg.is_none() {
            self.errorMsg.set_default();
        }
        self.errorMsg.as_mut().unwrap()
    }

    // Take field
    pub fn take_errorMsg(&mut self) -> ::std::string::String {
        self.errorMsg.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .hadoop.common.RpcResponseHeaderProto.RpcErrorCodeProto errorDetail = 6;


    pub fn get_errorDetail(&self) -> RpcResponseHeaderProto_RpcErrorCodeProto {
        self.errorDetail.unwrap_or(RpcResponseHeaderProto_RpcErrorCodeProto::ERROR_APPLICATION)
    }
    pub fn clear_errorDetail(&mut self) {
        self.errorDetail = ::std::option::Option::None;
    }

    pub fn has_errorDetail(&self) -> bool {
        self.errorDetail.is_some()
    }

    // Param is passed by value, moved
    pub fn set_errorDetail(&mut self, v: RpcResponseHeaderProto_RpcErrorCodeProto) {
        self.errorDetail = ::std::option::Option::Some(v);
    }

    // optional bytes clientId = 7;


    pub fn get_clientId(&self) -> &[u8] {
        match self.clientId.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_clientId(&mut self) {
        self.clientId.clear();
    }

    pub fn has_clientId(&self) -> bool {
        self.clientId.is_some()
    }

    // Param is passed by value, moved
    pub fn set_clientId(&mut self, v: ::std::vec::Vec<u8>) {
        self.clientId = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_clientId(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.clientId.is_none() {
            self.clientId.set_default();
        }
        self.clientId.as_mut().unwrap()
    }

    // Take field
    pub fn take_clientId(&mut self) -> ::std::vec::Vec<u8> {
        self.clientId.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional sint32 retryCount = 8;


    pub fn get_retryCount(&self) -> i32 {
        self.retryCount.unwrap_or(-1i32)
    }
    pub fn clear_retryCount(&mut self) {
        self.retryCount = ::std::option::Option::None;
    }

    pub fn has_retryCount(&self) -> bool {
        self.retryCount.is_some()
    }

    // Param is passed by value, moved
    pub fn set_retryCount(&mut self, v: i32) {
        self.retryCount = ::std::option::Option::Some(v);
    }

    // optional int64 stateId = 9;


    pub fn get_stateId(&self) -> i64 {
        self.stateId.unwrap_or(0)
    }
    pub fn clear_stateId(&mut self) {
        self.stateId = ::std::option::Option::None;
    }

    pub fn has_stateId(&self) -> bool {
        self.stateId.is_some()
    }

    // Param is passed by value, moved
    pub fn set_stateId(&mut self, v: i64) {
        self.stateId = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for RpcResponseHeaderProto {
    fn is_initialized(&self) -> bool {
        if self.callId.is_none() {
            return false;
        }
        if self.status.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.callId = ::std::option::Option::Some(tmp);
                },
                2 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.status, 2, &mut self.unknown_fields)?
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.serverIpcVersionNum = ::std::option::Option::Some(tmp);
                },
                4 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.exceptionClassName)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.errorMsg)?;
                },
                6 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.errorDetail, 6, &mut self.unknown_fields)?
                },
                7 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.clientId)?;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sint32()?;
                    self.retryCount = ::std::option::Option::Some(tmp);
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.stateId = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.callId {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.status {
            my_size += ::protobuf::rt::enum_size(2, v);
        }
        if let Some(v) = self.serverIpcVersionNum {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.exceptionClassName.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        if let Some(ref v) = self.errorMsg.as_ref() {
            my_size += ::protobuf::rt::string_size(5, &v);
        }
        if let Some(v) = self.errorDetail {
            my_size += ::protobuf::rt::enum_size(6, v);
        }
        if let Some(ref v) = self.clientId.as_ref() {
            my_size += ::protobuf::rt::bytes_size(7, &v);
        }
        if let Some(v) = self.retryCount {
            my_size += ::protobuf::rt::value_varint_zigzag_size(8, v);
        }
        if let Some(v) = self.stateId {
            my_size += ::protobuf::rt::value_size(9, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.callId {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.status {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&v))?;
        }
        if let Some(v) = self.serverIpcVersionNum {
            os.write_uint32(3, v)?;
        }
        if let Some(ref v) = self.exceptionClassName.as_ref() {
            os.write_string(4, &v)?;
        }
        if let Some(ref v) = self.errorMsg.as_ref() {
            os.write_string(5, &v)?;
        }
        if let Some(v) = self.errorDetail {
            os.write_enum(6, ::protobuf::ProtobufEnum::value(&v))?;
        }
        if let Some(ref v) = self.clientId.as_ref() {
            os.write_bytes(7, &v)?;
        }
        if let Some(v) = self.retryCount {
            os.write_sint32(8, v)?;
        }
        if let Some(v) = self.stateId {
            os.write_int64(9, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RpcResponseHeaderProto {
        RpcResponseHeaderProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "callId",
                |m: &RpcResponseHeaderProto| { &m.callId },
                |m: &mut RpcResponseHeaderProto| { &mut m.callId },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<RpcResponseHeaderProto_RpcStatusProto>>(
                "status",
                |m: &RpcResponseHeaderProto| { &m.status },
                |m: &mut RpcResponseHeaderProto| { &mut m.status },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "serverIpcVersionNum",
                |m: &RpcResponseHeaderProto| { &m.serverIpcVersionNum },
                |m: &mut RpcResponseHeaderProto| { &mut m.serverIpcVersionNum },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "exceptionClassName",
                |m: &RpcResponseHeaderProto| { &m.exceptionClassName },
                |m: &mut RpcResponseHeaderProto| { &mut m.exceptionClassName },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "errorMsg",
                |m: &RpcResponseHeaderProto| { &m.errorMsg },
                |m: &mut RpcResponseHeaderProto| { &mut m.errorMsg },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<RpcResponseHeaderProto_RpcErrorCodeProto>>(
                "errorDetail",
                |m: &RpcResponseHeaderProto| { &m.errorDetail },
                |m: &mut RpcResponseHeaderProto| { &mut m.errorDetail },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "clientId",
                |m: &RpcResponseHeaderProto| { &m.clientId },
                |m: &mut RpcResponseHeaderProto| { &mut m.clientId },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeSint32>(
                "retryCount",
                |m: &RpcResponseHeaderProto| { &m.retryCount },
                |m: &mut RpcResponseHeaderProto| { &mut m.retryCount },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "stateId",
                |m: &RpcResponseHeaderProto| { &m.stateId },
                |m: &mut RpcResponseHeaderProto| { &mut m.stateId },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RpcResponseHeaderProto>(
                "RpcResponseHeaderProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RpcResponseHeaderProto {
        static instance: ::protobuf::rt::LazyV2<RpcResponseHeaderProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RpcResponseHeaderProto::new)
    }
}

impl ::protobuf::Clear for RpcResponseHeaderProto {
    fn clear(&mut self) {
        self.callId = ::std::option::Option::None;
        self.status = ::std::option::Option::None;
        self.serverIpcVersionNum = ::std::option::Option::None;
        self.exceptionClassName.clear();
        self.errorMsg.clear();
        self.errorDetail = ::std::option::Option::None;
        self.clientId.clear();
        self.retryCount = ::std::option::Option::None;
        self.stateId = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RpcResponseHeaderProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RpcResponseHeaderProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum RpcResponseHeaderProto_RpcStatusProto {
    SUCCESS = 0,
    ERROR = 1,
    FATAL = 2,
}

impl ::protobuf::ProtobufEnum for RpcResponseHeaderProto_RpcStatusProto {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<RpcResponseHeaderProto_RpcStatusProto> {
        match value {
            0 => ::std::option::Option::Some(RpcResponseHeaderProto_RpcStatusProto::SUCCESS),
            1 => ::std::option::Option::Some(RpcResponseHeaderProto_RpcStatusProto::ERROR),
            2 => ::std::option::Option::Some(RpcResponseHeaderProto_RpcStatusProto::FATAL),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [RpcResponseHeaderProto_RpcStatusProto] = &[
            RpcResponseHeaderProto_RpcStatusProto::SUCCESS,
            RpcResponseHeaderProto_RpcStatusProto::ERROR,
            RpcResponseHeaderProto_RpcStatusProto::FATAL,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<RpcResponseHeaderProto_RpcStatusProto>("RpcResponseHeaderProto.RpcStatusProto", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for RpcResponseHeaderProto_RpcStatusProto {
}

impl ::std::default::Default for RpcResponseHeaderProto_RpcStatusProto {
    fn default() -> Self {
        RpcResponseHeaderProto_RpcStatusProto::SUCCESS
    }
}

impl ::protobuf::reflect::ProtobufValue for RpcResponseHeaderProto_RpcStatusProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum RpcResponseHeaderProto_RpcErrorCodeProto {
    ERROR_APPLICATION = 1,
    ERROR_NO_SUCH_METHOD = 2,
    ERROR_NO_SUCH_PROTOCOL = 3,
    ERROR_RPC_SERVER = 4,
    ERROR_SERIALIZING_RESPONSE = 5,
    ERROR_RPC_VERSION_MISMATCH = 6,
    FATAL_UNKNOWN = 10,
    FATAL_UNSUPPORTED_SERIALIZATION = 11,
    FATAL_INVALID_RPC_HEADER = 12,
    FATAL_DESERIALIZING_REQUEST = 13,
    FATAL_VERSION_MISMATCH = 14,
    FATAL_UNAUTHORIZED = 15,
}

impl ::protobuf::ProtobufEnum for RpcResponseHeaderProto_RpcErrorCodeProto {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<RpcResponseHeaderProto_RpcErrorCodeProto> {
        match value {
            1 => ::std::option::Option::Some(RpcResponseHeaderProto_RpcErrorCodeProto::ERROR_APPLICATION),
            2 => ::std::option::Option::Some(RpcResponseHeaderProto_RpcErrorCodeProto::ERROR_NO_SUCH_METHOD),
            3 => ::std::option::Option::Some(RpcResponseHeaderProto_RpcErrorCodeProto::ERROR_NO_SUCH_PROTOCOL),
            4 => ::std::option::Option::Some(RpcResponseHeaderProto_RpcErrorCodeProto::ERROR_RPC_SERVER),
            5 => ::std::option::Option::Some(RpcResponseHeaderProto_RpcErrorCodeProto::ERROR_SERIALIZING_RESPONSE),
            6 => ::std::option::Option::Some(RpcResponseHeaderProto_RpcErrorCodeProto::ERROR_RPC_VERSION_MISMATCH),
            10 => ::std::option::Option::Some(RpcResponseHeaderProto_RpcErrorCodeProto::FATAL_UNKNOWN),
            11 => ::std::option::Option::Some(RpcResponseHeaderProto_RpcErrorCodeProto::FATAL_UNSUPPORTED_SERIALIZATION),
            12 => ::std::option::Option::Some(RpcResponseHeaderProto_RpcErrorCodeProto::FATAL_INVALID_RPC_HEADER),
            13 => ::std::option::Option::Some(RpcResponseHeaderProto_RpcErrorCodeProto::FATAL_DESERIALIZING_REQUEST),
            14 => ::std::option::Option::Some(RpcResponseHeaderProto_RpcErrorCodeProto::FATAL_VERSION_MISMATCH),
            15 => ::std::option::Option::Some(RpcResponseHeaderProto_RpcErrorCodeProto::FATAL_UNAUTHORIZED),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [RpcResponseHeaderProto_RpcErrorCodeProto] = &[
            RpcResponseHeaderProto_RpcErrorCodeProto::ERROR_APPLICATION,
            RpcResponseHeaderProto_RpcErrorCodeProto::ERROR_NO_SUCH_METHOD,
            RpcResponseHeaderProto_RpcErrorCodeProto::ERROR_NO_SUCH_PROTOCOL,
            RpcResponseHeaderProto_RpcErrorCodeProto::ERROR_RPC_SERVER,
            RpcResponseHeaderProto_RpcErrorCodeProto::ERROR_SERIALIZING_RESPONSE,
            RpcResponseHeaderProto_RpcErrorCodeProto::ERROR_RPC_VERSION_MISMATCH,
            RpcResponseHeaderProto_RpcErrorCodeProto::FATAL_UNKNOWN,
            RpcResponseHeaderProto_RpcErrorCodeProto::FATAL_UNSUPPORTED_SERIALIZATION,
            RpcResponseHeaderProto_RpcErrorCodeProto::FATAL_INVALID_RPC_HEADER,
            RpcResponseHeaderProto_RpcErrorCodeProto::FATAL_DESERIALIZING_REQUEST,
            RpcResponseHeaderProto_RpcErrorCodeProto::FATAL_VERSION_MISMATCH,
            RpcResponseHeaderProto_RpcErrorCodeProto::FATAL_UNAUTHORIZED,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<RpcResponseHeaderProto_RpcErrorCodeProto>("RpcResponseHeaderProto.RpcErrorCodeProto", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for RpcResponseHeaderProto_RpcErrorCodeProto {
}

// Note, `Default` is implemented although default value is not 0
impl ::std::default::Default for RpcResponseHeaderProto_RpcErrorCodeProto {
    fn default() -> Self {
        RpcResponseHeaderProto_RpcErrorCodeProto::ERROR_APPLICATION
    }
}

impl ::protobuf::reflect::ProtobufValue for RpcResponseHeaderProto_RpcErrorCodeProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RpcSaslProto {
    // message fields
    version: ::std::option::Option<u32>,
    state: ::std::option::Option<RpcSaslProto_SaslState>,
    token: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    pub auths: ::protobuf::RepeatedField<RpcSaslProto_SaslAuth>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RpcSaslProto {
    fn default() -> &'a RpcSaslProto {
        <RpcSaslProto as ::protobuf::Message>::default_instance()
    }
}

impl RpcSaslProto {
    pub fn new() -> RpcSaslProto {
        ::std::default::Default::default()
    }

    // optional uint32 version = 1;


    pub fn get_version(&self) -> u32 {
        self.version.unwrap_or(0)
    }
    pub fn clear_version(&mut self) {
        self.version = ::std::option::Option::None;
    }

    pub fn has_version(&self) -> bool {
        self.version.is_some()
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: u32) {
        self.version = ::std::option::Option::Some(v);
    }

    // required .hadoop.common.RpcSaslProto.SaslState state = 2;


    pub fn get_state(&self) -> RpcSaslProto_SaslState {
        self.state.unwrap_or(RpcSaslProto_SaslState::SUCCESS)
    }
    pub fn clear_state(&mut self) {
        self.state = ::std::option::Option::None;
    }

    pub fn has_state(&self) -> bool {
        self.state.is_some()
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: RpcSaslProto_SaslState) {
        self.state = ::std::option::Option::Some(v);
    }

    // optional bytes token = 3;


    pub fn get_token(&self) -> &[u8] {
        match self.token.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_token(&mut self) {
        self.token.clear();
    }

    pub fn has_token(&self) -> bool {
        self.token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_token(&mut self, v: ::std::vec::Vec<u8>) {
        self.token = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_token(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.token.is_none() {
            self.token.set_default();
        }
        self.token.as_mut().unwrap()
    }

    // Take field
    pub fn take_token(&mut self) -> ::std::vec::Vec<u8> {
        self.token.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // repeated .hadoop.common.RpcSaslProto.SaslAuth auths = 4;


    pub fn get_auths(&self) -> &[RpcSaslProto_SaslAuth] {
        &self.auths
    }
    pub fn clear_auths(&mut self) {
        self.auths.clear();
    }

    // Param is passed by value, moved
    pub fn set_auths(&mut self, v: ::protobuf::RepeatedField<RpcSaslProto_SaslAuth>) {
        self.auths = v;
    }

    // Mutable pointer to the field.
    pub fn mut_auths(&mut self) -> &mut ::protobuf::RepeatedField<RpcSaslProto_SaslAuth> {
        &mut self.auths
    }

    // Take field
    pub fn take_auths(&mut self) -> ::protobuf::RepeatedField<RpcSaslProto_SaslAuth> {
        ::std::mem::replace(&mut self.auths, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for RpcSaslProto {
    fn is_initialized(&self) -> bool {
        if self.state.is_none() {
            return false;
        }
        for v in &self.auths {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.version = ::std::option::Option::Some(tmp);
                },
                2 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.state, 2, &mut self.unknown_fields)?
                },
                3 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.token)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.auths)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.version {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.state {
            my_size += ::protobuf::rt::enum_size(2, v);
        }
        if let Some(ref v) = self.token.as_ref() {
            my_size += ::protobuf::rt::bytes_size(3, &v);
        }
        for value in &self.auths {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.version {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.state {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&v))?;
        }
        if let Some(ref v) = self.token.as_ref() {
            os.write_bytes(3, &v)?;
        }
        for v in &self.auths {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RpcSaslProto {
        RpcSaslProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "version",
                |m: &RpcSaslProto| { &m.version },
                |m: &mut RpcSaslProto| { &mut m.version },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<RpcSaslProto_SaslState>>(
                "state",
                |m: &RpcSaslProto| { &m.state },
                |m: &mut RpcSaslProto| { &mut m.state },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "token",
                |m: &RpcSaslProto| { &m.token },
                |m: &mut RpcSaslProto| { &mut m.token },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RpcSaslProto_SaslAuth>>(
                "auths",
                |m: &RpcSaslProto| { &m.auths },
                |m: &mut RpcSaslProto| { &mut m.auths },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RpcSaslProto>(
                "RpcSaslProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RpcSaslProto {
        static instance: ::protobuf::rt::LazyV2<RpcSaslProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RpcSaslProto::new)
    }
}

impl ::protobuf::Clear for RpcSaslProto {
    fn clear(&mut self) {
        self.version = ::std::option::Option::None;
        self.state = ::std::option::Option::None;
        self.token.clear();
        self.auths.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RpcSaslProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RpcSaslProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RpcSaslProto_SaslAuth {
    // message fields
    method: ::protobuf::SingularField<::std::string::String>,
    mechanism: ::protobuf::SingularField<::std::string::String>,
    protocol: ::protobuf::SingularField<::std::string::String>,
    serverId: ::protobuf::SingularField<::std::string::String>,
    challenge: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RpcSaslProto_SaslAuth {
    fn default() -> &'a RpcSaslProto_SaslAuth {
        <RpcSaslProto_SaslAuth as ::protobuf::Message>::default_instance()
    }
}

impl RpcSaslProto_SaslAuth {
    pub fn new() -> RpcSaslProto_SaslAuth {
        ::std::default::Default::default()
    }

    // required string method = 1;


    pub fn get_method(&self) -> &str {
        match self.method.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_method(&mut self) {
        self.method.clear();
    }

    pub fn has_method(&self) -> bool {
        self.method.is_some()
    }

    // Param is passed by value, moved
    pub fn set_method(&mut self, v: ::std::string::String) {
        self.method = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_method(&mut self) -> &mut ::std::string::String {
        if self.method.is_none() {
            self.method.set_default();
        }
        self.method.as_mut().unwrap()
    }

    // Take field
    pub fn take_method(&mut self) -> ::std::string::String {
        self.method.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required string mechanism = 2;


    pub fn get_mechanism(&self) -> &str {
        match self.mechanism.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_mechanism(&mut self) {
        self.mechanism.clear();
    }

    pub fn has_mechanism(&self) -> bool {
        self.mechanism.is_some()
    }

    // Param is passed by value, moved
    pub fn set_mechanism(&mut self, v: ::std::string::String) {
        self.mechanism = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_mechanism(&mut self) -> &mut ::std::string::String {
        if self.mechanism.is_none() {
            self.mechanism.set_default();
        }
        self.mechanism.as_mut().unwrap()
    }

    // Take field
    pub fn take_mechanism(&mut self) -> ::std::string::String {
        self.mechanism.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string protocol = 3;


    pub fn get_protocol(&self) -> &str {
        match self.protocol.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_protocol(&mut self) {
        self.protocol.clear();
    }

    pub fn has_protocol(&self) -> bool {
        self.protocol.is_some()
    }

    // Param is passed by value, moved
    pub fn set_protocol(&mut self, v: ::std::string::String) {
        self.protocol = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_protocol(&mut self) -> &mut ::std::string::String {
        if self.protocol.is_none() {
            self.protocol.set_default();
        }
        self.protocol.as_mut().unwrap()
    }

    // Take field
    pub fn take_protocol(&mut self) -> ::std::string::String {
        self.protocol.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string serverId = 4;


    pub fn get_serverId(&self) -> &str {
        match self.serverId.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_serverId(&mut self) {
        self.serverId.clear();
    }

    pub fn has_serverId(&self) -> bool {
        self.serverId.is_some()
    }

    // Param is passed by value, moved
    pub fn set_serverId(&mut self, v: ::std::string::String) {
        self.serverId = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_serverId(&mut self) -> &mut ::std::string::String {
        if self.serverId.is_none() {
            self.serverId.set_default();
        }
        self.serverId.as_mut().unwrap()
    }

    // Take field
    pub fn take_serverId(&mut self) -> ::std::string::String {
        self.serverId.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bytes challenge = 5;


    pub fn get_challenge(&self) -> &[u8] {
        match self.challenge.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_challenge(&mut self) {
        self.challenge.clear();
    }

    pub fn has_challenge(&self) -> bool {
        self.challenge.is_some()
    }

    // Param is passed by value, moved
    pub fn set_challenge(&mut self, v: ::std::vec::Vec<u8>) {
        self.challenge = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_challenge(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.challenge.is_none() {
            self.challenge.set_default();
        }
        self.challenge.as_mut().unwrap()
    }

    // Take field
    pub fn take_challenge(&mut self) -> ::std::vec::Vec<u8> {
        self.challenge.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for RpcSaslProto_SaslAuth {
    fn is_initialized(&self) -> bool {
        if self.method.is_none() {
            return false;
        }
        if self.mechanism.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.method)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.mechanism)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.protocol)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.serverId)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.challenge)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.method.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(ref v) = self.mechanism.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(ref v) = self.protocol.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(ref v) = self.serverId.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        if let Some(ref v) = self.challenge.as_ref() {
            my_size += ::protobuf::rt::bytes_size(5, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.method.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(ref v) = self.mechanism.as_ref() {
            os.write_string(2, &v)?;
        }
        if let Some(ref v) = self.protocol.as_ref() {
            os.write_string(3, &v)?;
        }
        if let Some(ref v) = self.serverId.as_ref() {
            os.write_string(4, &v)?;
        }
        if let Some(ref v) = self.challenge.as_ref() {
            os.write_bytes(5, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RpcSaslProto_SaslAuth {
        RpcSaslProto_SaslAuth::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "method",
                |m: &RpcSaslProto_SaslAuth| { &m.method },
                |m: &mut RpcSaslProto_SaslAuth| { &mut m.method },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "mechanism",
                |m: &RpcSaslProto_SaslAuth| { &m.mechanism },
                |m: &mut RpcSaslProto_SaslAuth| { &mut m.mechanism },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "protocol",
                |m: &RpcSaslProto_SaslAuth| { &m.protocol },
                |m: &mut RpcSaslProto_SaslAuth| { &mut m.protocol },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "serverId",
                |m: &RpcSaslProto_SaslAuth| { &m.serverId },
                |m: &mut RpcSaslProto_SaslAuth| { &mut m.serverId },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "challenge",
                |m: &RpcSaslProto_SaslAuth| { &m.challenge },
                |m: &mut RpcSaslProto_SaslAuth| { &mut m.challenge },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RpcSaslProto_SaslAuth>(
                "RpcSaslProto.SaslAuth",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RpcSaslProto_SaslAuth {
        static instance: ::protobuf::rt::LazyV2<RpcSaslProto_SaslAuth> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RpcSaslProto_SaslAuth::new)
    }
}

impl ::protobuf::Clear for RpcSaslProto_SaslAuth {
    fn clear(&mut self) {
        self.method.clear();
        self.mechanism.clear();
        self.protocol.clear();
        self.serverId.clear();
        self.challenge.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RpcSaslProto_SaslAuth {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RpcSaslProto_SaslAuth {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum RpcSaslProto_SaslState {
    SUCCESS = 0,
    NEGOTIATE = 1,
    INITIATE = 2,
    CHALLENGE = 3,
    RESPONSE = 4,
    WRAP = 5,
}

impl ::protobuf::ProtobufEnum for RpcSaslProto_SaslState {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<RpcSaslProto_SaslState> {
        match value {
            0 => ::std::option::Option::Some(RpcSaslProto_SaslState::SUCCESS),
            1 => ::std::option::Option::Some(RpcSaslProto_SaslState::NEGOTIATE),
            2 => ::std::option::Option::Some(RpcSaslProto_SaslState::INITIATE),
            3 => ::std::option::Option::Some(RpcSaslProto_SaslState::CHALLENGE),
            4 => ::std::option::Option::Some(RpcSaslProto_SaslState::RESPONSE),
            5 => ::std::option::Option::Some(RpcSaslProto_SaslState::WRAP),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [RpcSaslProto_SaslState] = &[
            RpcSaslProto_SaslState::SUCCESS,
            RpcSaslProto_SaslState::NEGOTIATE,
            RpcSaslProto_SaslState::INITIATE,
            RpcSaslProto_SaslState::CHALLENGE,
            RpcSaslProto_SaslState::RESPONSE,
            RpcSaslProto_SaslState::WRAP,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<RpcSaslProto_SaslState>("RpcSaslProto.SaslState", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for RpcSaslProto_SaslState {
}

impl ::std::default::Default for RpcSaslProto_SaslState {
    fn default() -> Self {
        RpcSaslProto_SaslState::SUCCESS
    }
}

impl ::protobuf::reflect::ProtobufValue for RpcSaslProto_SaslState {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum RpcKindProto {
    RPC_BUILTIN = 0,
    RPC_WRITABLE = 1,
    RPC_PROTOCOL_BUFFER = 2,
}

impl ::protobuf::ProtobufEnum for RpcKindProto {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<RpcKindProto> {
        match value {
            0 => ::std::option::Option::Some(RpcKindProto::RPC_BUILTIN),
            1 => ::std::option::Option::Some(RpcKindProto::RPC_WRITABLE),
            2 => ::std::option::Option::Some(RpcKindProto::RPC_PROTOCOL_BUFFER),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [RpcKindProto] = &[
            RpcKindProto::RPC_BUILTIN,
            RpcKindProto::RPC_WRITABLE,
            RpcKindProto::RPC_PROTOCOL_BUFFER,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<RpcKindProto>("RpcKindProto", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for RpcKindProto {
}

impl ::std::default::Default for RpcKindProto {
    fn default() -> Self {
        RpcKindProto::RPC_BUILTIN
    }
}

impl ::protobuf::reflect::ProtobufValue for RpcKindProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0fRpcHeader.proto\x12\rhadoop.common\"I\n\x11RPCTraceInfoProto\x12\
    \x18\n\x07traceId\x18\x01\x20\x01(\x03R\x07traceId\x12\x1a\n\x08parentId\
    \x18\x02\x20\x01(\x03R\x08parentId\"O\n\x15RPCCallerContextProto\x12\x18\
    \n\x07context\x18\x01\x20\x02(\tR\x07context\x12\x1c\n\tsignature\x18\
    \x02\x20\x01(\x0cR\tsignature\"\xf6\x03\n\x15RpcRequestHeaderProto\x125\
    \n\x07rpcKind\x18\x01\x20\x01(\x0e2\x1b.hadoop.common.RpcKindProtoR\x07r\
    pcKind\x12I\n\x05rpcOp\x18\x02\x20\x01(\x0e23.hadoop.common.RpcRequestHe\
    aderProto.OperationProtoR\x05rpcOp\x12\x16\n\x06callId\x18\x03\x20\x02(\
    \x11R\x06callId\x12\x1a\n\x08clientId\x18\x04\x20\x02(\x0cR\x08clientId\
    \x12\"\n\nretryCount\x18\x05\x20\x01(\x11:\x02-1R\nretryCount\x12>\n\ttr\
    aceInfo\x18\x06\x20\x01(\x0b2\x20.hadoop.common.RPCTraceInfoProtoR\ttrac\
    eInfo\x12J\n\rcallerContext\x18\x07\x20\x01(\x0b2$.hadoop.common.RPCCall\
    erContextProtoR\rcallerContext\x12\x18\n\x07stateId\x18\x08\x20\x01(\x03\
    R\x07stateId\"]\n\x0eOperationProto\x12\x14\n\x10RPC_FINAL_PACKET\x10\0\
    \x12\x1b\n\x17RPC_CONTINUATION_PACKET\x10\x01\x12\x18\n\x14RPC_CLOSE_CON\
    NECTION\x10\x02\"\xca\x06\n\x16RpcResponseHeaderProto\x12\x16\n\x06callI\
    d\x18\x01\x20\x02(\rR\x06callId\x12L\n\x06status\x18\x02\x20\x02(\x0e24.\
    hadoop.common.RpcResponseHeaderProto.RpcStatusProtoR\x06status\x120\n\
    \x13serverIpcVersionNum\x18\x03\x20\x01(\rR\x13serverIpcVersionNum\x12.\
    \n\x12exceptionClassName\x18\x04\x20\x01(\tR\x12exceptionClassName\x12\
    \x1a\n\x08errorMsg\x18\x05\x20\x01(\tR\x08errorMsg\x12Y\n\x0berrorDetail\
    \x18\x06\x20\x01(\x0e27.hadoop.common.RpcResponseHeaderProto.RpcErrorCod\
    eProtoR\x0berrorDetail\x12\x1a\n\x08clientId\x18\x07\x20\x01(\x0cR\x08cl\
    ientId\x12\"\n\nretryCount\x18\x08\x20\x01(\x11:\x02-1R\nretryCount\x12\
    \x18\n\x07stateId\x18\t\x20\x01(\x03R\x07stateId\"3\n\x0eRpcStatusProto\
    \x12\x0b\n\x07SUCCESS\x10\0\x12\t\n\x05ERROR\x10\x01\x12\t\n\x05FATAL\
    \x10\x02\"\xe1\x02\n\x11RpcErrorCodeProto\x12\x15\n\x11ERROR_APPLICATION\
    \x10\x01\x12\x18\n\x14ERROR_NO_SUCH_METHOD\x10\x02\x12\x1a\n\x16ERROR_NO\
    _SUCH_PROTOCOL\x10\x03\x12\x14\n\x10ERROR_RPC_SERVER\x10\x04\x12\x1e\n\
    \x1aERROR_SERIALIZING_RESPONSE\x10\x05\x12\x1e\n\x1aERROR_RPC_VERSION_MI\
    SMATCH\x10\x06\x12\x11\n\rFATAL_UNKNOWN\x10\n\x12#\n\x1fFATAL_UNSUPPORTE\
    D_SERIALIZATION\x10\x0b\x12\x1c\n\x18FATAL_INVALID_RPC_HEADER\x10\x0c\
    \x12\x1f\n\x1bFATAL_DESERIALIZING_REQUEST\x10\r\x12\x1a\n\x16FATAL_VERSI\
    ON_MISMATCH\x10\x0e\x12\x16\n\x12FATAL_UNAUTHORIZED\x10\x0f\"\xae\x03\n\
    \x0cRpcSaslProto\x12\x18\n\x07version\x18\x01\x20\x01(\rR\x07version\x12\
    ;\n\x05state\x18\x02\x20\x02(\x0e2%.hadoop.common.RpcSaslProto.SaslState\
    R\x05state\x12\x14\n\x05token\x18\x03\x20\x01(\x0cR\x05token\x12:\n\x05a\
    uths\x18\x04\x20\x03(\x0b2$.hadoop.common.RpcSaslProto.SaslAuthR\x05auth\
    s\x1a\x96\x01\n\x08SaslAuth\x12\x16\n\x06method\x18\x01\x20\x02(\tR\x06m\
    ethod\x12\x1c\n\tmechanism\x18\x02\x20\x02(\tR\tmechanism\x12\x1a\n\x08p\
    rotocol\x18\x03\x20\x01(\tR\x08protocol\x12\x1a\n\x08serverId\x18\x04\
    \x20\x01(\tR\x08serverId\x12\x1c\n\tchallenge\x18\x05\x20\x01(\x0cR\tcha\
    llenge\"\\\n\tSaslState\x12\x0b\n\x07SUCCESS\x10\0\x12\r\n\tNEGOTIATE\
    \x10\x01\x12\x0c\n\x08INITIATE\x10\x02\x12\r\n\tCHALLENGE\x10\x03\x12\
    \x0c\n\x08RESPONSE\x10\x04\x12\x08\n\x04WRAP\x10\x05*J\n\x0cRpcKindProto\
    \x12\x0f\n\x0bRPC_BUILTIN\x10\0\x12\x10\n\x0cRPC_WRITABLE\x10\x01\x12\
    \x17\n\x13RPC_PROTOCOL_BUFFER\x10\x02B4\n\x1eorg.apache.hadoop.ipc.proto\
    bufB\x0fRpcHeaderProtos\xa0\x01\x01\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
