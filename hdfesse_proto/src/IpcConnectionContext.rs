// This file is generated by rust-protobuf 2.23.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `IpcConnectionContext.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_23_0;

#[derive(PartialEq,Clone,Default)]
pub struct UserInformationProto {
    // message fields
    effectiveUser: ::protobuf::SingularField<::std::string::String>,
    realUser: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UserInformationProto {
    fn default() -> &'a UserInformationProto {
        <UserInformationProto as ::protobuf::Message>::default_instance()
    }
}

impl UserInformationProto {
    pub fn new() -> UserInformationProto {
        ::std::default::Default::default()
    }

    // optional string effectiveUser = 1;


    pub fn get_effectiveUser(&self) -> &str {
        match self.effectiveUser.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_effectiveUser(&mut self) {
        self.effectiveUser.clear();
    }

    pub fn has_effectiveUser(&self) -> bool {
        self.effectiveUser.is_some()
    }

    // Param is passed by value, moved
    pub fn set_effectiveUser(&mut self, v: ::std::string::String) {
        self.effectiveUser = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_effectiveUser(&mut self) -> &mut ::std::string::String {
        if self.effectiveUser.is_none() {
            self.effectiveUser.set_default();
        }
        self.effectiveUser.as_mut().unwrap()
    }

    // Take field
    pub fn take_effectiveUser(&mut self) -> ::std::string::String {
        self.effectiveUser.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string realUser = 2;


    pub fn get_realUser(&self) -> &str {
        match self.realUser.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_realUser(&mut self) {
        self.realUser.clear();
    }

    pub fn has_realUser(&self) -> bool {
        self.realUser.is_some()
    }

    // Param is passed by value, moved
    pub fn set_realUser(&mut self, v: ::std::string::String) {
        self.realUser = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_realUser(&mut self) -> &mut ::std::string::String {
        if self.realUser.is_none() {
            self.realUser.set_default();
        }
        self.realUser.as_mut().unwrap()
    }

    // Take field
    pub fn take_realUser(&mut self) -> ::std::string::String {
        self.realUser.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for UserInformationProto {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.effectiveUser)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.realUser)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.effectiveUser.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(ref v) = self.realUser.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.effectiveUser.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(ref v) = self.realUser.as_ref() {
            os.write_string(2, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UserInformationProto {
        UserInformationProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "effectiveUser",
                |m: &UserInformationProto| { &m.effectiveUser },
                |m: &mut UserInformationProto| { &mut m.effectiveUser },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "realUser",
                |m: &UserInformationProto| { &m.realUser },
                |m: &mut UserInformationProto| { &mut m.realUser },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<UserInformationProto>(
                "UserInformationProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static UserInformationProto {
        static instance: ::protobuf::rt::LazyV2<UserInformationProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(UserInformationProto::new)
    }
}

impl ::protobuf::Clear for UserInformationProto {
    fn clear(&mut self) {
        self.effectiveUser.clear();
        self.realUser.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UserInformationProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UserInformationProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct IpcConnectionContextProto {
    // message fields
    pub userInfo: ::protobuf::SingularPtrField<UserInformationProto>,
    protocol: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a IpcConnectionContextProto {
    fn default() -> &'a IpcConnectionContextProto {
        <IpcConnectionContextProto as ::protobuf::Message>::default_instance()
    }
}

impl IpcConnectionContextProto {
    pub fn new() -> IpcConnectionContextProto {
        ::std::default::Default::default()
    }

    // optional .hadoop.common.UserInformationProto userInfo = 2;


    pub fn get_userInfo(&self) -> &UserInformationProto {
        self.userInfo.as_ref().unwrap_or_else(|| <UserInformationProto as ::protobuf::Message>::default_instance())
    }
    pub fn clear_userInfo(&mut self) {
        self.userInfo.clear();
    }

    pub fn has_userInfo(&self) -> bool {
        self.userInfo.is_some()
    }

    // Param is passed by value, moved
    pub fn set_userInfo(&mut self, v: UserInformationProto) {
        self.userInfo = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_userInfo(&mut self) -> &mut UserInformationProto {
        if self.userInfo.is_none() {
            self.userInfo.set_default();
        }
        self.userInfo.as_mut().unwrap()
    }

    // Take field
    pub fn take_userInfo(&mut self) -> UserInformationProto {
        self.userInfo.take().unwrap_or_else(|| UserInformationProto::new())
    }

    // optional string protocol = 3;


    pub fn get_protocol(&self) -> &str {
        match self.protocol.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_protocol(&mut self) {
        self.protocol.clear();
    }

    pub fn has_protocol(&self) -> bool {
        self.protocol.is_some()
    }

    // Param is passed by value, moved
    pub fn set_protocol(&mut self, v: ::std::string::String) {
        self.protocol = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_protocol(&mut self) -> &mut ::std::string::String {
        if self.protocol.is_none() {
            self.protocol.set_default();
        }
        self.protocol.as_mut().unwrap()
    }

    // Take field
    pub fn take_protocol(&mut self) -> ::std::string::String {
        self.protocol.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for IpcConnectionContextProto {
    fn is_initialized(&self) -> bool {
        for v in &self.userInfo {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.userInfo)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.protocol)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.userInfo.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.protocol.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.userInfo.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.protocol.as_ref() {
            os.write_string(3, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> IpcConnectionContextProto {
        IpcConnectionContextProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<UserInformationProto>>(
                "userInfo",
                |m: &IpcConnectionContextProto| { &m.userInfo },
                |m: &mut IpcConnectionContextProto| { &mut m.userInfo },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "protocol",
                |m: &IpcConnectionContextProto| { &m.protocol },
                |m: &mut IpcConnectionContextProto| { &mut m.protocol },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<IpcConnectionContextProto>(
                "IpcConnectionContextProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static IpcConnectionContextProto {
        static instance: ::protobuf::rt::LazyV2<IpcConnectionContextProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(IpcConnectionContextProto::new)
    }
}

impl ::protobuf::Clear for IpcConnectionContextProto {
    fn clear(&mut self) {
        self.userInfo.clear();
        self.protocol.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for IpcConnectionContextProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for IpcConnectionContextProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1aIpcConnectionContext.proto\x12\rhadoop.common\"X\n\x14UserInformat\
    ionProto\x12$\n\reffectiveUser\x18\x01\x20\x01(\tR\reffectiveUser\x12\
    \x1a\n\x08realUser\x18\x02\x20\x01(\tR\x08realUser\"x\n\x19IpcConnection\
    ContextProto\x12?\n\x08userInfo\x18\x02\x20\x01(\x0b2#.hadoop.common.Use\
    rInformationProtoR\x08userInfo\x12\x1a\n\x08protocol\x18\x03\x20\x01(\tR\
    \x08protocolB?\n\x1eorg.apache.hadoop.ipc.protobufB\x1aIpcConnectionCont\
    extProtos\xa0\x01\x01\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
