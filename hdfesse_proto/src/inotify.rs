// This file is generated by rust-protobuf 2.23.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `inotify.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_23_0;

#[derive(PartialEq,Clone,Default)]
pub struct EventProto {
    // message fields
    field_type: ::std::option::Option<EventType>,
    contents: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EventProto {
    fn default() -> &'a EventProto {
        <EventProto as ::protobuf::Message>::default_instance()
    }
}

impl EventProto {
    pub fn new() -> EventProto {
        ::std::default::Default::default()
    }

    // required .hadoop.hdfs.EventType type = 1;


    pub fn get_field_type(&self) -> EventType {
        self.field_type.unwrap_or(EventType::EVENT_CREATE)
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = ::std::option::Option::None;
    }

    pub fn has_field_type(&self) -> bool {
        self.field_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: EventType) {
        self.field_type = ::std::option::Option::Some(v);
    }

    // required bytes contents = 2;


    pub fn get_contents(&self) -> &[u8] {
        match self.contents.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_contents(&mut self) {
        self.contents.clear();
    }

    pub fn has_contents(&self) -> bool {
        self.contents.is_some()
    }

    // Param is passed by value, moved
    pub fn set_contents(&mut self, v: ::std::vec::Vec<u8>) {
        self.contents = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_contents(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.contents.is_none() {
            self.contents.set_default();
        }
        self.contents.as_mut().unwrap()
    }

    // Take field
    pub fn take_contents(&mut self) -> ::std::vec::Vec<u8> {
        self.contents.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for EventProto {
    fn is_initialized(&self) -> bool {
        if self.field_type.is_none() {
            return false;
        }
        if self.contents.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.contents)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.field_type {
            my_size += ::protobuf::rt::enum_size(1, v);
        }
        if let Some(ref v) = self.contents.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.field_type {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&v))?;
        }
        if let Some(ref v) = self.contents.as_ref() {
            os.write_bytes(2, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EventProto {
        EventProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<EventType>>(
                "type",
                |m: &EventProto| { &m.field_type },
                |m: &mut EventProto| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "contents",
                |m: &EventProto| { &m.contents },
                |m: &mut EventProto| { &mut m.contents },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<EventProto>(
                "EventProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static EventProto {
        static instance: ::protobuf::rt::LazyV2<EventProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EventProto::new)
    }
}

impl ::protobuf::Clear for EventProto {
    fn clear(&mut self) {
        self.field_type = ::std::option::Option::None;
        self.contents.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EventProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EventProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EventBatchProto {
    // message fields
    txid: ::std::option::Option<i64>,
    pub events: ::protobuf::RepeatedField<EventProto>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EventBatchProto {
    fn default() -> &'a EventBatchProto {
        <EventBatchProto as ::protobuf::Message>::default_instance()
    }
}

impl EventBatchProto {
    pub fn new() -> EventBatchProto {
        ::std::default::Default::default()
    }

    // required int64 txid = 1;


    pub fn get_txid(&self) -> i64 {
        self.txid.unwrap_or(0)
    }
    pub fn clear_txid(&mut self) {
        self.txid = ::std::option::Option::None;
    }

    pub fn has_txid(&self) -> bool {
        self.txid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_txid(&mut self, v: i64) {
        self.txid = ::std::option::Option::Some(v);
    }

    // repeated .hadoop.hdfs.EventProto events = 2;


    pub fn get_events(&self) -> &[EventProto] {
        &self.events
    }
    pub fn clear_events(&mut self) {
        self.events.clear();
    }

    // Param is passed by value, moved
    pub fn set_events(&mut self, v: ::protobuf::RepeatedField<EventProto>) {
        self.events = v;
    }

    // Mutable pointer to the field.
    pub fn mut_events(&mut self) -> &mut ::protobuf::RepeatedField<EventProto> {
        &mut self.events
    }

    // Take field
    pub fn take_events(&mut self) -> ::protobuf::RepeatedField<EventProto> {
        ::std::mem::replace(&mut self.events, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for EventBatchProto {
    fn is_initialized(&self) -> bool {
        if self.txid.is_none() {
            return false;
        }
        for v in &self.events {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.txid = ::std::option::Option::Some(tmp);
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.events)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.txid {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.events {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.txid {
            os.write_int64(1, v)?;
        }
        for v in &self.events {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EventBatchProto {
        EventBatchProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "txid",
                |m: &EventBatchProto| { &m.txid },
                |m: &mut EventBatchProto| { &mut m.txid },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<EventProto>>(
                "events",
                |m: &EventBatchProto| { &m.events },
                |m: &mut EventBatchProto| { &mut m.events },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<EventBatchProto>(
                "EventBatchProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static EventBatchProto {
        static instance: ::protobuf::rt::LazyV2<EventBatchProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EventBatchProto::new)
    }
}

impl ::protobuf::Clear for EventBatchProto {
    fn clear(&mut self) {
        self.txid = ::std::option::Option::None;
        self.events.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EventBatchProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EventBatchProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreateEventProto {
    // message fields
    field_type: ::std::option::Option<INodeType>,
    path: ::protobuf::SingularField<::std::string::String>,
    ctime: ::std::option::Option<i64>,
    ownerName: ::protobuf::SingularField<::std::string::String>,
    groupName: ::protobuf::SingularField<::std::string::String>,
    pub perms: ::protobuf::SingularPtrField<super::acl::FsPermissionProto>,
    replication: ::std::option::Option<i32>,
    symlinkTarget: ::protobuf::SingularField<::std::string::String>,
    overwrite: ::std::option::Option<bool>,
    defaultBlockSize: ::std::option::Option<i64>,
    erasureCoded: ::std::option::Option<bool>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateEventProto {
    fn default() -> &'a CreateEventProto {
        <CreateEventProto as ::protobuf::Message>::default_instance()
    }
}

impl CreateEventProto {
    pub fn new() -> CreateEventProto {
        ::std::default::Default::default()
    }

    // required .hadoop.hdfs.INodeType type = 1;


    pub fn get_field_type(&self) -> INodeType {
        self.field_type.unwrap_or(INodeType::I_TYPE_FILE)
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = ::std::option::Option::None;
    }

    pub fn has_field_type(&self) -> bool {
        self.field_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: INodeType) {
        self.field_type = ::std::option::Option::Some(v);
    }

    // required string path = 2;


    pub fn get_path(&self) -> &str {
        match self.path.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_path(&mut self) {
        self.path.clear();
    }

    pub fn has_path(&self) -> bool {
        self.path.is_some()
    }

    // Param is passed by value, moved
    pub fn set_path(&mut self, v: ::std::string::String) {
        self.path = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_path(&mut self) -> &mut ::std::string::String {
        if self.path.is_none() {
            self.path.set_default();
        }
        self.path.as_mut().unwrap()
    }

    // Take field
    pub fn take_path(&mut self) -> ::std::string::String {
        self.path.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required int64 ctime = 3;


    pub fn get_ctime(&self) -> i64 {
        self.ctime.unwrap_or(0)
    }
    pub fn clear_ctime(&mut self) {
        self.ctime = ::std::option::Option::None;
    }

    pub fn has_ctime(&self) -> bool {
        self.ctime.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ctime(&mut self, v: i64) {
        self.ctime = ::std::option::Option::Some(v);
    }

    // required string ownerName = 4;


    pub fn get_ownerName(&self) -> &str {
        match self.ownerName.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_ownerName(&mut self) {
        self.ownerName.clear();
    }

    pub fn has_ownerName(&self) -> bool {
        self.ownerName.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ownerName(&mut self, v: ::std::string::String) {
        self.ownerName = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ownerName(&mut self) -> &mut ::std::string::String {
        if self.ownerName.is_none() {
            self.ownerName.set_default();
        }
        self.ownerName.as_mut().unwrap()
    }

    // Take field
    pub fn take_ownerName(&mut self) -> ::std::string::String {
        self.ownerName.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required string groupName = 5;


    pub fn get_groupName(&self) -> &str {
        match self.groupName.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_groupName(&mut self) {
        self.groupName.clear();
    }

    pub fn has_groupName(&self) -> bool {
        self.groupName.is_some()
    }

    // Param is passed by value, moved
    pub fn set_groupName(&mut self, v: ::std::string::String) {
        self.groupName = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_groupName(&mut self) -> &mut ::std::string::String {
        if self.groupName.is_none() {
            self.groupName.set_default();
        }
        self.groupName.as_mut().unwrap()
    }

    // Take field
    pub fn take_groupName(&mut self) -> ::std::string::String {
        self.groupName.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required .hadoop.hdfs.FsPermissionProto perms = 6;


    pub fn get_perms(&self) -> &super::acl::FsPermissionProto {
        self.perms.as_ref().unwrap_or_else(|| <super::acl::FsPermissionProto as ::protobuf::Message>::default_instance())
    }
    pub fn clear_perms(&mut self) {
        self.perms.clear();
    }

    pub fn has_perms(&self) -> bool {
        self.perms.is_some()
    }

    // Param is passed by value, moved
    pub fn set_perms(&mut self, v: super::acl::FsPermissionProto) {
        self.perms = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_perms(&mut self) -> &mut super::acl::FsPermissionProto {
        if self.perms.is_none() {
            self.perms.set_default();
        }
        self.perms.as_mut().unwrap()
    }

    // Take field
    pub fn take_perms(&mut self) -> super::acl::FsPermissionProto {
        self.perms.take().unwrap_or_else(|| super::acl::FsPermissionProto::new())
    }

    // optional int32 replication = 7;


    pub fn get_replication(&self) -> i32 {
        self.replication.unwrap_or(0)
    }
    pub fn clear_replication(&mut self) {
        self.replication = ::std::option::Option::None;
    }

    pub fn has_replication(&self) -> bool {
        self.replication.is_some()
    }

    // Param is passed by value, moved
    pub fn set_replication(&mut self, v: i32) {
        self.replication = ::std::option::Option::Some(v);
    }

    // optional string symlinkTarget = 8;


    pub fn get_symlinkTarget(&self) -> &str {
        match self.symlinkTarget.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_symlinkTarget(&mut self) {
        self.symlinkTarget.clear();
    }

    pub fn has_symlinkTarget(&self) -> bool {
        self.symlinkTarget.is_some()
    }

    // Param is passed by value, moved
    pub fn set_symlinkTarget(&mut self, v: ::std::string::String) {
        self.symlinkTarget = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_symlinkTarget(&mut self) -> &mut ::std::string::String {
        if self.symlinkTarget.is_none() {
            self.symlinkTarget.set_default();
        }
        self.symlinkTarget.as_mut().unwrap()
    }

    // Take field
    pub fn take_symlinkTarget(&mut self) -> ::std::string::String {
        self.symlinkTarget.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bool overwrite = 9;


    pub fn get_overwrite(&self) -> bool {
        self.overwrite.unwrap_or(false)
    }
    pub fn clear_overwrite(&mut self) {
        self.overwrite = ::std::option::Option::None;
    }

    pub fn has_overwrite(&self) -> bool {
        self.overwrite.is_some()
    }

    // Param is passed by value, moved
    pub fn set_overwrite(&mut self, v: bool) {
        self.overwrite = ::std::option::Option::Some(v);
    }

    // optional int64 defaultBlockSize = 10;


    pub fn get_defaultBlockSize(&self) -> i64 {
        self.defaultBlockSize.unwrap_or(0i64)
    }
    pub fn clear_defaultBlockSize(&mut self) {
        self.defaultBlockSize = ::std::option::Option::None;
    }

    pub fn has_defaultBlockSize(&self) -> bool {
        self.defaultBlockSize.is_some()
    }

    // Param is passed by value, moved
    pub fn set_defaultBlockSize(&mut self, v: i64) {
        self.defaultBlockSize = ::std::option::Option::Some(v);
    }

    // optional bool erasureCoded = 11;


    pub fn get_erasureCoded(&self) -> bool {
        self.erasureCoded.unwrap_or(false)
    }
    pub fn clear_erasureCoded(&mut self) {
        self.erasureCoded = ::std::option::Option::None;
    }

    pub fn has_erasureCoded(&self) -> bool {
        self.erasureCoded.is_some()
    }

    // Param is passed by value, moved
    pub fn set_erasureCoded(&mut self, v: bool) {
        self.erasureCoded = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CreateEventProto {
    fn is_initialized(&self) -> bool {
        if self.field_type.is_none() {
            return false;
        }
        if self.path.is_none() {
            return false;
        }
        if self.ctime.is_none() {
            return false;
        }
        if self.ownerName.is_none() {
            return false;
        }
        if self.groupName.is_none() {
            return false;
        }
        if self.perms.is_none() {
            return false;
        }
        for v in &self.perms {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.path)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.ctime = ::std::option::Option::Some(tmp);
                },
                4 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.ownerName)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.groupName)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.perms)?;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.replication = ::std::option::Option::Some(tmp);
                },
                8 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.symlinkTarget)?;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.overwrite = ::std::option::Option::Some(tmp);
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.defaultBlockSize = ::std::option::Option::Some(tmp);
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.erasureCoded = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.field_type {
            my_size += ::protobuf::rt::enum_size(1, v);
        }
        if let Some(ref v) = self.path.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.ctime {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.ownerName.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        if let Some(ref v) = self.groupName.as_ref() {
            my_size += ::protobuf::rt::string_size(5, &v);
        }
        if let Some(ref v) = self.perms.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(v) = self.replication {
            my_size += ::protobuf::rt::value_size(7, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.symlinkTarget.as_ref() {
            my_size += ::protobuf::rt::string_size(8, &v);
        }
        if let Some(v) = self.overwrite {
            my_size += 2;
        }
        if let Some(v) = self.defaultBlockSize {
            my_size += ::protobuf::rt::value_size(10, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.erasureCoded {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.field_type {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&v))?;
        }
        if let Some(ref v) = self.path.as_ref() {
            os.write_string(2, &v)?;
        }
        if let Some(v) = self.ctime {
            os.write_int64(3, v)?;
        }
        if let Some(ref v) = self.ownerName.as_ref() {
            os.write_string(4, &v)?;
        }
        if let Some(ref v) = self.groupName.as_ref() {
            os.write_string(5, &v)?;
        }
        if let Some(ref v) = self.perms.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(v) = self.replication {
            os.write_int32(7, v)?;
        }
        if let Some(ref v) = self.symlinkTarget.as_ref() {
            os.write_string(8, &v)?;
        }
        if let Some(v) = self.overwrite {
            os.write_bool(9, v)?;
        }
        if let Some(v) = self.defaultBlockSize {
            os.write_int64(10, v)?;
        }
        if let Some(v) = self.erasureCoded {
            os.write_bool(11, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateEventProto {
        CreateEventProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<INodeType>>(
                "type",
                |m: &CreateEventProto| { &m.field_type },
                |m: &mut CreateEventProto| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "path",
                |m: &CreateEventProto| { &m.path },
                |m: &mut CreateEventProto| { &mut m.path },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "ctime",
                |m: &CreateEventProto| { &m.ctime },
                |m: &mut CreateEventProto| { &mut m.ctime },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "ownerName",
                |m: &CreateEventProto| { &m.ownerName },
                |m: &mut CreateEventProto| { &mut m.ownerName },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "groupName",
                |m: &CreateEventProto| { &m.groupName },
                |m: &mut CreateEventProto| { &mut m.groupName },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::acl::FsPermissionProto>>(
                "perms",
                |m: &CreateEventProto| { &m.perms },
                |m: &mut CreateEventProto| { &mut m.perms },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "replication",
                |m: &CreateEventProto| { &m.replication },
                |m: &mut CreateEventProto| { &mut m.replication },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "symlinkTarget",
                |m: &CreateEventProto| { &m.symlinkTarget },
                |m: &mut CreateEventProto| { &mut m.symlinkTarget },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "overwrite",
                |m: &CreateEventProto| { &m.overwrite },
                |m: &mut CreateEventProto| { &mut m.overwrite },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "defaultBlockSize",
                |m: &CreateEventProto| { &m.defaultBlockSize },
                |m: &mut CreateEventProto| { &mut m.defaultBlockSize },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "erasureCoded",
                |m: &CreateEventProto| { &m.erasureCoded },
                |m: &mut CreateEventProto| { &mut m.erasureCoded },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CreateEventProto>(
                "CreateEventProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CreateEventProto {
        static instance: ::protobuf::rt::LazyV2<CreateEventProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CreateEventProto::new)
    }
}

impl ::protobuf::Clear for CreateEventProto {
    fn clear(&mut self) {
        self.field_type = ::std::option::Option::None;
        self.path.clear();
        self.ctime = ::std::option::Option::None;
        self.ownerName.clear();
        self.groupName.clear();
        self.perms.clear();
        self.replication = ::std::option::Option::None;
        self.symlinkTarget.clear();
        self.overwrite = ::std::option::Option::None;
        self.defaultBlockSize = ::std::option::Option::None;
        self.erasureCoded = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateEventProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateEventProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CloseEventProto {
    // message fields
    path: ::protobuf::SingularField<::std::string::String>,
    fileSize: ::std::option::Option<i64>,
    timestamp: ::std::option::Option<i64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CloseEventProto {
    fn default() -> &'a CloseEventProto {
        <CloseEventProto as ::protobuf::Message>::default_instance()
    }
}

impl CloseEventProto {
    pub fn new() -> CloseEventProto {
        ::std::default::Default::default()
    }

    // required string path = 1;


    pub fn get_path(&self) -> &str {
        match self.path.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_path(&mut self) {
        self.path.clear();
    }

    pub fn has_path(&self) -> bool {
        self.path.is_some()
    }

    // Param is passed by value, moved
    pub fn set_path(&mut self, v: ::std::string::String) {
        self.path = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_path(&mut self) -> &mut ::std::string::String {
        if self.path.is_none() {
            self.path.set_default();
        }
        self.path.as_mut().unwrap()
    }

    // Take field
    pub fn take_path(&mut self) -> ::std::string::String {
        self.path.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required int64 fileSize = 2;


    pub fn get_fileSize(&self) -> i64 {
        self.fileSize.unwrap_or(0)
    }
    pub fn clear_fileSize(&mut self) {
        self.fileSize = ::std::option::Option::None;
    }

    pub fn has_fileSize(&self) -> bool {
        self.fileSize.is_some()
    }

    // Param is passed by value, moved
    pub fn set_fileSize(&mut self, v: i64) {
        self.fileSize = ::std::option::Option::Some(v);
    }

    // required int64 timestamp = 3;


    pub fn get_timestamp(&self) -> i64 {
        self.timestamp.unwrap_or(0)
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp = ::std::option::Option::None;
    }

    pub fn has_timestamp(&self) -> bool {
        self.timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: i64) {
        self.timestamp = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CloseEventProto {
    fn is_initialized(&self) -> bool {
        if self.path.is_none() {
            return false;
        }
        if self.fileSize.is_none() {
            return false;
        }
        if self.timestamp.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.path)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.fileSize = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.timestamp = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.path.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.fileSize {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.timestamp {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.path.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(v) = self.fileSize {
            os.write_int64(2, v)?;
        }
        if let Some(v) = self.timestamp {
            os.write_int64(3, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CloseEventProto {
        CloseEventProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "path",
                |m: &CloseEventProto| { &m.path },
                |m: &mut CloseEventProto| { &mut m.path },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "fileSize",
                |m: &CloseEventProto| { &m.fileSize },
                |m: &mut CloseEventProto| { &mut m.fileSize },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "timestamp",
                |m: &CloseEventProto| { &m.timestamp },
                |m: &mut CloseEventProto| { &mut m.timestamp },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CloseEventProto>(
                "CloseEventProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CloseEventProto {
        static instance: ::protobuf::rt::LazyV2<CloseEventProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CloseEventProto::new)
    }
}

impl ::protobuf::Clear for CloseEventProto {
    fn clear(&mut self) {
        self.path.clear();
        self.fileSize = ::std::option::Option::None;
        self.timestamp = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CloseEventProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CloseEventProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TruncateEventProto {
    // message fields
    path: ::protobuf::SingularField<::std::string::String>,
    fileSize: ::std::option::Option<i64>,
    timestamp: ::std::option::Option<i64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TruncateEventProto {
    fn default() -> &'a TruncateEventProto {
        <TruncateEventProto as ::protobuf::Message>::default_instance()
    }
}

impl TruncateEventProto {
    pub fn new() -> TruncateEventProto {
        ::std::default::Default::default()
    }

    // required string path = 1;


    pub fn get_path(&self) -> &str {
        match self.path.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_path(&mut self) {
        self.path.clear();
    }

    pub fn has_path(&self) -> bool {
        self.path.is_some()
    }

    // Param is passed by value, moved
    pub fn set_path(&mut self, v: ::std::string::String) {
        self.path = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_path(&mut self) -> &mut ::std::string::String {
        if self.path.is_none() {
            self.path.set_default();
        }
        self.path.as_mut().unwrap()
    }

    // Take field
    pub fn take_path(&mut self) -> ::std::string::String {
        self.path.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required int64 fileSize = 2;


    pub fn get_fileSize(&self) -> i64 {
        self.fileSize.unwrap_or(0)
    }
    pub fn clear_fileSize(&mut self) {
        self.fileSize = ::std::option::Option::None;
    }

    pub fn has_fileSize(&self) -> bool {
        self.fileSize.is_some()
    }

    // Param is passed by value, moved
    pub fn set_fileSize(&mut self, v: i64) {
        self.fileSize = ::std::option::Option::Some(v);
    }

    // required int64 timestamp = 3;


    pub fn get_timestamp(&self) -> i64 {
        self.timestamp.unwrap_or(0)
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp = ::std::option::Option::None;
    }

    pub fn has_timestamp(&self) -> bool {
        self.timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: i64) {
        self.timestamp = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for TruncateEventProto {
    fn is_initialized(&self) -> bool {
        if self.path.is_none() {
            return false;
        }
        if self.fileSize.is_none() {
            return false;
        }
        if self.timestamp.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.path)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.fileSize = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.timestamp = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.path.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.fileSize {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.timestamp {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.path.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(v) = self.fileSize {
            os.write_int64(2, v)?;
        }
        if let Some(v) = self.timestamp {
            os.write_int64(3, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TruncateEventProto {
        TruncateEventProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "path",
                |m: &TruncateEventProto| { &m.path },
                |m: &mut TruncateEventProto| { &mut m.path },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "fileSize",
                |m: &TruncateEventProto| { &m.fileSize },
                |m: &mut TruncateEventProto| { &mut m.fileSize },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "timestamp",
                |m: &TruncateEventProto| { &m.timestamp },
                |m: &mut TruncateEventProto| { &mut m.timestamp },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TruncateEventProto>(
                "TruncateEventProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TruncateEventProto {
        static instance: ::protobuf::rt::LazyV2<TruncateEventProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TruncateEventProto::new)
    }
}

impl ::protobuf::Clear for TruncateEventProto {
    fn clear(&mut self) {
        self.path.clear();
        self.fileSize = ::std::option::Option::None;
        self.timestamp = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TruncateEventProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TruncateEventProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AppendEventProto {
    // message fields
    path: ::protobuf::SingularField<::std::string::String>,
    newBlock: ::std::option::Option<bool>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AppendEventProto {
    fn default() -> &'a AppendEventProto {
        <AppendEventProto as ::protobuf::Message>::default_instance()
    }
}

impl AppendEventProto {
    pub fn new() -> AppendEventProto {
        ::std::default::Default::default()
    }

    // required string path = 1;


    pub fn get_path(&self) -> &str {
        match self.path.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_path(&mut self) {
        self.path.clear();
    }

    pub fn has_path(&self) -> bool {
        self.path.is_some()
    }

    // Param is passed by value, moved
    pub fn set_path(&mut self, v: ::std::string::String) {
        self.path = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_path(&mut self) -> &mut ::std::string::String {
        if self.path.is_none() {
            self.path.set_default();
        }
        self.path.as_mut().unwrap()
    }

    // Take field
    pub fn take_path(&mut self) -> ::std::string::String {
        self.path.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bool newBlock = 2;


    pub fn get_newBlock(&self) -> bool {
        self.newBlock.unwrap_or(false)
    }
    pub fn clear_newBlock(&mut self) {
        self.newBlock = ::std::option::Option::None;
    }

    pub fn has_newBlock(&self) -> bool {
        self.newBlock.is_some()
    }

    // Param is passed by value, moved
    pub fn set_newBlock(&mut self, v: bool) {
        self.newBlock = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for AppendEventProto {
    fn is_initialized(&self) -> bool {
        if self.path.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.path)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.newBlock = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.path.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.newBlock {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.path.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(v) = self.newBlock {
            os.write_bool(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AppendEventProto {
        AppendEventProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "path",
                |m: &AppendEventProto| { &m.path },
                |m: &mut AppendEventProto| { &mut m.path },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "newBlock",
                |m: &AppendEventProto| { &m.newBlock },
                |m: &mut AppendEventProto| { &mut m.newBlock },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AppendEventProto>(
                "AppendEventProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AppendEventProto {
        static instance: ::protobuf::rt::LazyV2<AppendEventProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AppendEventProto::new)
    }
}

impl ::protobuf::Clear for AppendEventProto {
    fn clear(&mut self) {
        self.path.clear();
        self.newBlock = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AppendEventProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AppendEventProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RenameEventProto {
    // message fields
    srcPath: ::protobuf::SingularField<::std::string::String>,
    destPath: ::protobuf::SingularField<::std::string::String>,
    timestamp: ::std::option::Option<i64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RenameEventProto {
    fn default() -> &'a RenameEventProto {
        <RenameEventProto as ::protobuf::Message>::default_instance()
    }
}

impl RenameEventProto {
    pub fn new() -> RenameEventProto {
        ::std::default::Default::default()
    }

    // required string srcPath = 1;


    pub fn get_srcPath(&self) -> &str {
        match self.srcPath.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_srcPath(&mut self) {
        self.srcPath.clear();
    }

    pub fn has_srcPath(&self) -> bool {
        self.srcPath.is_some()
    }

    // Param is passed by value, moved
    pub fn set_srcPath(&mut self, v: ::std::string::String) {
        self.srcPath = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_srcPath(&mut self) -> &mut ::std::string::String {
        if self.srcPath.is_none() {
            self.srcPath.set_default();
        }
        self.srcPath.as_mut().unwrap()
    }

    // Take field
    pub fn take_srcPath(&mut self) -> ::std::string::String {
        self.srcPath.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required string destPath = 2;


    pub fn get_destPath(&self) -> &str {
        match self.destPath.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_destPath(&mut self) {
        self.destPath.clear();
    }

    pub fn has_destPath(&self) -> bool {
        self.destPath.is_some()
    }

    // Param is passed by value, moved
    pub fn set_destPath(&mut self, v: ::std::string::String) {
        self.destPath = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_destPath(&mut self) -> &mut ::std::string::String {
        if self.destPath.is_none() {
            self.destPath.set_default();
        }
        self.destPath.as_mut().unwrap()
    }

    // Take field
    pub fn take_destPath(&mut self) -> ::std::string::String {
        self.destPath.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required int64 timestamp = 3;


    pub fn get_timestamp(&self) -> i64 {
        self.timestamp.unwrap_or(0)
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp = ::std::option::Option::None;
    }

    pub fn has_timestamp(&self) -> bool {
        self.timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: i64) {
        self.timestamp = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for RenameEventProto {
    fn is_initialized(&self) -> bool {
        if self.srcPath.is_none() {
            return false;
        }
        if self.destPath.is_none() {
            return false;
        }
        if self.timestamp.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.srcPath)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.destPath)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.timestamp = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.srcPath.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(ref v) = self.destPath.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.timestamp {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.srcPath.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(ref v) = self.destPath.as_ref() {
            os.write_string(2, &v)?;
        }
        if let Some(v) = self.timestamp {
            os.write_int64(3, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RenameEventProto {
        RenameEventProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "srcPath",
                |m: &RenameEventProto| { &m.srcPath },
                |m: &mut RenameEventProto| { &mut m.srcPath },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "destPath",
                |m: &RenameEventProto| { &m.destPath },
                |m: &mut RenameEventProto| { &mut m.destPath },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "timestamp",
                |m: &RenameEventProto| { &m.timestamp },
                |m: &mut RenameEventProto| { &mut m.timestamp },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RenameEventProto>(
                "RenameEventProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RenameEventProto {
        static instance: ::protobuf::rt::LazyV2<RenameEventProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RenameEventProto::new)
    }
}

impl ::protobuf::Clear for RenameEventProto {
    fn clear(&mut self) {
        self.srcPath.clear();
        self.destPath.clear();
        self.timestamp = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RenameEventProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RenameEventProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MetadataUpdateEventProto {
    // message fields
    path: ::protobuf::SingularField<::std::string::String>,
    field_type: ::std::option::Option<MetadataUpdateType>,
    mtime: ::std::option::Option<i64>,
    atime: ::std::option::Option<i64>,
    replication: ::std::option::Option<i32>,
    ownerName: ::protobuf::SingularField<::std::string::String>,
    groupName: ::protobuf::SingularField<::std::string::String>,
    pub perms: ::protobuf::SingularPtrField<super::acl::FsPermissionProto>,
    pub acls: ::protobuf::RepeatedField<super::acl::AclEntryProto>,
    pub xAttrs: ::protobuf::RepeatedField<super::xattr::XAttrProto>,
    xAttrsRemoved: ::std::option::Option<bool>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MetadataUpdateEventProto {
    fn default() -> &'a MetadataUpdateEventProto {
        <MetadataUpdateEventProto as ::protobuf::Message>::default_instance()
    }
}

impl MetadataUpdateEventProto {
    pub fn new() -> MetadataUpdateEventProto {
        ::std::default::Default::default()
    }

    // required string path = 1;


    pub fn get_path(&self) -> &str {
        match self.path.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_path(&mut self) {
        self.path.clear();
    }

    pub fn has_path(&self) -> bool {
        self.path.is_some()
    }

    // Param is passed by value, moved
    pub fn set_path(&mut self, v: ::std::string::String) {
        self.path = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_path(&mut self) -> &mut ::std::string::String {
        if self.path.is_none() {
            self.path.set_default();
        }
        self.path.as_mut().unwrap()
    }

    // Take field
    pub fn take_path(&mut self) -> ::std::string::String {
        self.path.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required .hadoop.hdfs.MetadataUpdateType type = 2;


    pub fn get_field_type(&self) -> MetadataUpdateType {
        self.field_type.unwrap_or(MetadataUpdateType::META_TYPE_TIMES)
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = ::std::option::Option::None;
    }

    pub fn has_field_type(&self) -> bool {
        self.field_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: MetadataUpdateType) {
        self.field_type = ::std::option::Option::Some(v);
    }

    // optional int64 mtime = 3;


    pub fn get_mtime(&self) -> i64 {
        self.mtime.unwrap_or(0)
    }
    pub fn clear_mtime(&mut self) {
        self.mtime = ::std::option::Option::None;
    }

    pub fn has_mtime(&self) -> bool {
        self.mtime.is_some()
    }

    // Param is passed by value, moved
    pub fn set_mtime(&mut self, v: i64) {
        self.mtime = ::std::option::Option::Some(v);
    }

    // optional int64 atime = 4;


    pub fn get_atime(&self) -> i64 {
        self.atime.unwrap_or(0)
    }
    pub fn clear_atime(&mut self) {
        self.atime = ::std::option::Option::None;
    }

    pub fn has_atime(&self) -> bool {
        self.atime.is_some()
    }

    // Param is passed by value, moved
    pub fn set_atime(&mut self, v: i64) {
        self.atime = ::std::option::Option::Some(v);
    }

    // optional int32 replication = 5;


    pub fn get_replication(&self) -> i32 {
        self.replication.unwrap_or(0)
    }
    pub fn clear_replication(&mut self) {
        self.replication = ::std::option::Option::None;
    }

    pub fn has_replication(&self) -> bool {
        self.replication.is_some()
    }

    // Param is passed by value, moved
    pub fn set_replication(&mut self, v: i32) {
        self.replication = ::std::option::Option::Some(v);
    }

    // optional string ownerName = 6;


    pub fn get_ownerName(&self) -> &str {
        match self.ownerName.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_ownerName(&mut self) {
        self.ownerName.clear();
    }

    pub fn has_ownerName(&self) -> bool {
        self.ownerName.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ownerName(&mut self, v: ::std::string::String) {
        self.ownerName = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ownerName(&mut self) -> &mut ::std::string::String {
        if self.ownerName.is_none() {
            self.ownerName.set_default();
        }
        self.ownerName.as_mut().unwrap()
    }

    // Take field
    pub fn take_ownerName(&mut self) -> ::std::string::String {
        self.ownerName.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string groupName = 7;


    pub fn get_groupName(&self) -> &str {
        match self.groupName.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_groupName(&mut self) {
        self.groupName.clear();
    }

    pub fn has_groupName(&self) -> bool {
        self.groupName.is_some()
    }

    // Param is passed by value, moved
    pub fn set_groupName(&mut self, v: ::std::string::String) {
        self.groupName = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_groupName(&mut self) -> &mut ::std::string::String {
        if self.groupName.is_none() {
            self.groupName.set_default();
        }
        self.groupName.as_mut().unwrap()
    }

    // Take field
    pub fn take_groupName(&mut self) -> ::std::string::String {
        self.groupName.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .hadoop.hdfs.FsPermissionProto perms = 8;


    pub fn get_perms(&self) -> &super::acl::FsPermissionProto {
        self.perms.as_ref().unwrap_or_else(|| <super::acl::FsPermissionProto as ::protobuf::Message>::default_instance())
    }
    pub fn clear_perms(&mut self) {
        self.perms.clear();
    }

    pub fn has_perms(&self) -> bool {
        self.perms.is_some()
    }

    // Param is passed by value, moved
    pub fn set_perms(&mut self, v: super::acl::FsPermissionProto) {
        self.perms = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_perms(&mut self) -> &mut super::acl::FsPermissionProto {
        if self.perms.is_none() {
            self.perms.set_default();
        }
        self.perms.as_mut().unwrap()
    }

    // Take field
    pub fn take_perms(&mut self) -> super::acl::FsPermissionProto {
        self.perms.take().unwrap_or_else(|| super::acl::FsPermissionProto::new())
    }

    // repeated .hadoop.hdfs.AclEntryProto acls = 9;


    pub fn get_acls(&self) -> &[super::acl::AclEntryProto] {
        &self.acls
    }
    pub fn clear_acls(&mut self) {
        self.acls.clear();
    }

    // Param is passed by value, moved
    pub fn set_acls(&mut self, v: ::protobuf::RepeatedField<super::acl::AclEntryProto>) {
        self.acls = v;
    }

    // Mutable pointer to the field.
    pub fn mut_acls(&mut self) -> &mut ::protobuf::RepeatedField<super::acl::AclEntryProto> {
        &mut self.acls
    }

    // Take field
    pub fn take_acls(&mut self) -> ::protobuf::RepeatedField<super::acl::AclEntryProto> {
        ::std::mem::replace(&mut self.acls, ::protobuf::RepeatedField::new())
    }

    // repeated .hadoop.hdfs.XAttrProto xAttrs = 10;


    pub fn get_xAttrs(&self) -> &[super::xattr::XAttrProto] {
        &self.xAttrs
    }
    pub fn clear_xAttrs(&mut self) {
        self.xAttrs.clear();
    }

    // Param is passed by value, moved
    pub fn set_xAttrs(&mut self, v: ::protobuf::RepeatedField<super::xattr::XAttrProto>) {
        self.xAttrs = v;
    }

    // Mutable pointer to the field.
    pub fn mut_xAttrs(&mut self) -> &mut ::protobuf::RepeatedField<super::xattr::XAttrProto> {
        &mut self.xAttrs
    }

    // Take field
    pub fn take_xAttrs(&mut self) -> ::protobuf::RepeatedField<super::xattr::XAttrProto> {
        ::std::mem::replace(&mut self.xAttrs, ::protobuf::RepeatedField::new())
    }

    // optional bool xAttrsRemoved = 11;


    pub fn get_xAttrsRemoved(&self) -> bool {
        self.xAttrsRemoved.unwrap_or(false)
    }
    pub fn clear_xAttrsRemoved(&mut self) {
        self.xAttrsRemoved = ::std::option::Option::None;
    }

    pub fn has_xAttrsRemoved(&self) -> bool {
        self.xAttrsRemoved.is_some()
    }

    // Param is passed by value, moved
    pub fn set_xAttrsRemoved(&mut self, v: bool) {
        self.xAttrsRemoved = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for MetadataUpdateEventProto {
    fn is_initialized(&self) -> bool {
        if self.path.is_none() {
            return false;
        }
        if self.field_type.is_none() {
            return false;
        }
        for v in &self.perms {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.acls {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.xAttrs {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.path)?;
                },
                2 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 2, &mut self.unknown_fields)?
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.mtime = ::std::option::Option::Some(tmp);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.atime = ::std::option::Option::Some(tmp);
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.replication = ::std::option::Option::Some(tmp);
                },
                6 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.ownerName)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.groupName)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.perms)?;
                },
                9 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.acls)?;
                },
                10 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.xAttrs)?;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.xAttrsRemoved = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.path.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.field_type {
            my_size += ::protobuf::rt::enum_size(2, v);
        }
        if let Some(v) = self.mtime {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.atime {
            my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.replication {
            my_size += ::protobuf::rt::value_size(5, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.ownerName.as_ref() {
            my_size += ::protobuf::rt::string_size(6, &v);
        }
        if let Some(ref v) = self.groupName.as_ref() {
            my_size += ::protobuf::rt::string_size(7, &v);
        }
        if let Some(ref v) = self.perms.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.acls {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.xAttrs {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(v) = self.xAttrsRemoved {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.path.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(v) = self.field_type {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&v))?;
        }
        if let Some(v) = self.mtime {
            os.write_int64(3, v)?;
        }
        if let Some(v) = self.atime {
            os.write_int64(4, v)?;
        }
        if let Some(v) = self.replication {
            os.write_int32(5, v)?;
        }
        if let Some(ref v) = self.ownerName.as_ref() {
            os.write_string(6, &v)?;
        }
        if let Some(ref v) = self.groupName.as_ref() {
            os.write_string(7, &v)?;
        }
        if let Some(ref v) = self.perms.as_ref() {
            os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.acls {
            os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.xAttrs {
            os.write_tag(10, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(v) = self.xAttrsRemoved {
            os.write_bool(11, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MetadataUpdateEventProto {
        MetadataUpdateEventProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "path",
                |m: &MetadataUpdateEventProto| { &m.path },
                |m: &mut MetadataUpdateEventProto| { &mut m.path },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<MetadataUpdateType>>(
                "type",
                |m: &MetadataUpdateEventProto| { &m.field_type },
                |m: &mut MetadataUpdateEventProto| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "mtime",
                |m: &MetadataUpdateEventProto| { &m.mtime },
                |m: &mut MetadataUpdateEventProto| { &mut m.mtime },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "atime",
                |m: &MetadataUpdateEventProto| { &m.atime },
                |m: &mut MetadataUpdateEventProto| { &mut m.atime },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "replication",
                |m: &MetadataUpdateEventProto| { &m.replication },
                |m: &mut MetadataUpdateEventProto| { &mut m.replication },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "ownerName",
                |m: &MetadataUpdateEventProto| { &m.ownerName },
                |m: &mut MetadataUpdateEventProto| { &mut m.ownerName },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "groupName",
                |m: &MetadataUpdateEventProto| { &m.groupName },
                |m: &mut MetadataUpdateEventProto| { &mut m.groupName },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::acl::FsPermissionProto>>(
                "perms",
                |m: &MetadataUpdateEventProto| { &m.perms },
                |m: &mut MetadataUpdateEventProto| { &mut m.perms },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::acl::AclEntryProto>>(
                "acls",
                |m: &MetadataUpdateEventProto| { &m.acls },
                |m: &mut MetadataUpdateEventProto| { &mut m.acls },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::xattr::XAttrProto>>(
                "xAttrs",
                |m: &MetadataUpdateEventProto| { &m.xAttrs },
                |m: &mut MetadataUpdateEventProto| { &mut m.xAttrs },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "xAttrsRemoved",
                |m: &MetadataUpdateEventProto| { &m.xAttrsRemoved },
                |m: &mut MetadataUpdateEventProto| { &mut m.xAttrsRemoved },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MetadataUpdateEventProto>(
                "MetadataUpdateEventProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MetadataUpdateEventProto {
        static instance: ::protobuf::rt::LazyV2<MetadataUpdateEventProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MetadataUpdateEventProto::new)
    }
}

impl ::protobuf::Clear for MetadataUpdateEventProto {
    fn clear(&mut self) {
        self.path.clear();
        self.field_type = ::std::option::Option::None;
        self.mtime = ::std::option::Option::None;
        self.atime = ::std::option::Option::None;
        self.replication = ::std::option::Option::None;
        self.ownerName.clear();
        self.groupName.clear();
        self.perms.clear();
        self.acls.clear();
        self.xAttrs.clear();
        self.xAttrsRemoved = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MetadataUpdateEventProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MetadataUpdateEventProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UnlinkEventProto {
    // message fields
    path: ::protobuf::SingularField<::std::string::String>,
    timestamp: ::std::option::Option<i64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UnlinkEventProto {
    fn default() -> &'a UnlinkEventProto {
        <UnlinkEventProto as ::protobuf::Message>::default_instance()
    }
}

impl UnlinkEventProto {
    pub fn new() -> UnlinkEventProto {
        ::std::default::Default::default()
    }

    // required string path = 1;


    pub fn get_path(&self) -> &str {
        match self.path.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_path(&mut self) {
        self.path.clear();
    }

    pub fn has_path(&self) -> bool {
        self.path.is_some()
    }

    // Param is passed by value, moved
    pub fn set_path(&mut self, v: ::std::string::String) {
        self.path = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_path(&mut self) -> &mut ::std::string::String {
        if self.path.is_none() {
            self.path.set_default();
        }
        self.path.as_mut().unwrap()
    }

    // Take field
    pub fn take_path(&mut self) -> ::std::string::String {
        self.path.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required int64 timestamp = 2;


    pub fn get_timestamp(&self) -> i64 {
        self.timestamp.unwrap_or(0)
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp = ::std::option::Option::None;
    }

    pub fn has_timestamp(&self) -> bool {
        self.timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: i64) {
        self.timestamp = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for UnlinkEventProto {
    fn is_initialized(&self) -> bool {
        if self.path.is_none() {
            return false;
        }
        if self.timestamp.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.path)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.timestamp = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.path.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.timestamp {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.path.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(v) = self.timestamp {
            os.write_int64(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UnlinkEventProto {
        UnlinkEventProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "path",
                |m: &UnlinkEventProto| { &m.path },
                |m: &mut UnlinkEventProto| { &mut m.path },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "timestamp",
                |m: &UnlinkEventProto| { &m.timestamp },
                |m: &mut UnlinkEventProto| { &mut m.timestamp },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<UnlinkEventProto>(
                "UnlinkEventProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static UnlinkEventProto {
        static instance: ::protobuf::rt::LazyV2<UnlinkEventProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(UnlinkEventProto::new)
    }
}

impl ::protobuf::Clear for UnlinkEventProto {
    fn clear(&mut self) {
        self.path.clear();
        self.timestamp = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UnlinkEventProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UnlinkEventProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EventsListProto {
    // message fields
    pub events: ::protobuf::RepeatedField<EventProto>,
    firstTxid: ::std::option::Option<i64>,
    lastTxid: ::std::option::Option<i64>,
    syncTxid: ::std::option::Option<i64>,
    pub batch: ::protobuf::RepeatedField<EventBatchProto>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EventsListProto {
    fn default() -> &'a EventsListProto {
        <EventsListProto as ::protobuf::Message>::default_instance()
    }
}

impl EventsListProto {
    pub fn new() -> EventsListProto {
        ::std::default::Default::default()
    }

    // repeated .hadoop.hdfs.EventProto events = 1;


    pub fn get_events(&self) -> &[EventProto] {
        &self.events
    }
    pub fn clear_events(&mut self) {
        self.events.clear();
    }

    // Param is passed by value, moved
    pub fn set_events(&mut self, v: ::protobuf::RepeatedField<EventProto>) {
        self.events = v;
    }

    // Mutable pointer to the field.
    pub fn mut_events(&mut self) -> &mut ::protobuf::RepeatedField<EventProto> {
        &mut self.events
    }

    // Take field
    pub fn take_events(&mut self) -> ::protobuf::RepeatedField<EventProto> {
        ::std::mem::replace(&mut self.events, ::protobuf::RepeatedField::new())
    }

    // required int64 firstTxid = 2;


    pub fn get_firstTxid(&self) -> i64 {
        self.firstTxid.unwrap_or(0)
    }
    pub fn clear_firstTxid(&mut self) {
        self.firstTxid = ::std::option::Option::None;
    }

    pub fn has_firstTxid(&self) -> bool {
        self.firstTxid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_firstTxid(&mut self, v: i64) {
        self.firstTxid = ::std::option::Option::Some(v);
    }

    // required int64 lastTxid = 3;


    pub fn get_lastTxid(&self) -> i64 {
        self.lastTxid.unwrap_or(0)
    }
    pub fn clear_lastTxid(&mut self) {
        self.lastTxid = ::std::option::Option::None;
    }

    pub fn has_lastTxid(&self) -> bool {
        self.lastTxid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lastTxid(&mut self, v: i64) {
        self.lastTxid = ::std::option::Option::Some(v);
    }

    // required int64 syncTxid = 4;


    pub fn get_syncTxid(&self) -> i64 {
        self.syncTxid.unwrap_or(0)
    }
    pub fn clear_syncTxid(&mut self) {
        self.syncTxid = ::std::option::Option::None;
    }

    pub fn has_syncTxid(&self) -> bool {
        self.syncTxid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_syncTxid(&mut self, v: i64) {
        self.syncTxid = ::std::option::Option::Some(v);
    }

    // repeated .hadoop.hdfs.EventBatchProto batch = 5;


    pub fn get_batch(&self) -> &[EventBatchProto] {
        &self.batch
    }
    pub fn clear_batch(&mut self) {
        self.batch.clear();
    }

    // Param is passed by value, moved
    pub fn set_batch(&mut self, v: ::protobuf::RepeatedField<EventBatchProto>) {
        self.batch = v;
    }

    // Mutable pointer to the field.
    pub fn mut_batch(&mut self) -> &mut ::protobuf::RepeatedField<EventBatchProto> {
        &mut self.batch
    }

    // Take field
    pub fn take_batch(&mut self) -> ::protobuf::RepeatedField<EventBatchProto> {
        ::std::mem::replace(&mut self.batch, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for EventsListProto {
    fn is_initialized(&self) -> bool {
        if self.firstTxid.is_none() {
            return false;
        }
        if self.lastTxid.is_none() {
            return false;
        }
        if self.syncTxid.is_none() {
            return false;
        }
        for v in &self.events {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.batch {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.events)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.firstTxid = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.lastTxid = ::std::option::Option::Some(tmp);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.syncTxid = ::std::option::Option::Some(tmp);
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.batch)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.events {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(v) = self.firstTxid {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.lastTxid {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.syncTxid {
            my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.batch {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.events {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(v) = self.firstTxid {
            os.write_int64(2, v)?;
        }
        if let Some(v) = self.lastTxid {
            os.write_int64(3, v)?;
        }
        if let Some(v) = self.syncTxid {
            os.write_int64(4, v)?;
        }
        for v in &self.batch {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EventsListProto {
        EventsListProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<EventProto>>(
                "events",
                |m: &EventsListProto| { &m.events },
                |m: &mut EventsListProto| { &mut m.events },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "firstTxid",
                |m: &EventsListProto| { &m.firstTxid },
                |m: &mut EventsListProto| { &mut m.firstTxid },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "lastTxid",
                |m: &EventsListProto| { &m.lastTxid },
                |m: &mut EventsListProto| { &mut m.lastTxid },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "syncTxid",
                |m: &EventsListProto| { &m.syncTxid },
                |m: &mut EventsListProto| { &mut m.syncTxid },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<EventBatchProto>>(
                "batch",
                |m: &EventsListProto| { &m.batch },
                |m: &mut EventsListProto| { &mut m.batch },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<EventsListProto>(
                "EventsListProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static EventsListProto {
        static instance: ::protobuf::rt::LazyV2<EventsListProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EventsListProto::new)
    }
}

impl ::protobuf::Clear for EventsListProto {
    fn clear(&mut self) {
        self.events.clear();
        self.firstTxid = ::std::option::Option::None;
        self.lastTxid = ::std::option::Option::None;
        self.syncTxid = ::std::option::Option::None;
        self.batch.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EventsListProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EventsListProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum EventType {
    EVENT_CREATE = 0,
    EVENT_CLOSE = 1,
    EVENT_APPEND = 2,
    EVENT_RENAME = 3,
    EVENT_METADATA = 4,
    EVENT_UNLINK = 5,
    EVENT_TRUNCATE = 6,
}

impl ::protobuf::ProtobufEnum for EventType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EventType> {
        match value {
            0 => ::std::option::Option::Some(EventType::EVENT_CREATE),
            1 => ::std::option::Option::Some(EventType::EVENT_CLOSE),
            2 => ::std::option::Option::Some(EventType::EVENT_APPEND),
            3 => ::std::option::Option::Some(EventType::EVENT_RENAME),
            4 => ::std::option::Option::Some(EventType::EVENT_METADATA),
            5 => ::std::option::Option::Some(EventType::EVENT_UNLINK),
            6 => ::std::option::Option::Some(EventType::EVENT_TRUNCATE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [EventType] = &[
            EventType::EVENT_CREATE,
            EventType::EVENT_CLOSE,
            EventType::EVENT_APPEND,
            EventType::EVENT_RENAME,
            EventType::EVENT_METADATA,
            EventType::EVENT_UNLINK,
            EventType::EVENT_TRUNCATE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<EventType>("EventType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for EventType {
}

impl ::std::default::Default for EventType {
    fn default() -> Self {
        EventType::EVENT_CREATE
    }
}

impl ::protobuf::reflect::ProtobufValue for EventType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum INodeType {
    I_TYPE_FILE = 0,
    I_TYPE_DIRECTORY = 1,
    I_TYPE_SYMLINK = 2,
}

impl ::protobuf::ProtobufEnum for INodeType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<INodeType> {
        match value {
            0 => ::std::option::Option::Some(INodeType::I_TYPE_FILE),
            1 => ::std::option::Option::Some(INodeType::I_TYPE_DIRECTORY),
            2 => ::std::option::Option::Some(INodeType::I_TYPE_SYMLINK),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [INodeType] = &[
            INodeType::I_TYPE_FILE,
            INodeType::I_TYPE_DIRECTORY,
            INodeType::I_TYPE_SYMLINK,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<INodeType>("INodeType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for INodeType {
}

impl ::std::default::Default for INodeType {
    fn default() -> Self {
        INodeType::I_TYPE_FILE
    }
}

impl ::protobuf::reflect::ProtobufValue for INodeType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum MetadataUpdateType {
    META_TYPE_TIMES = 0,
    META_TYPE_REPLICATION = 1,
    META_TYPE_OWNER = 2,
    META_TYPE_PERMS = 3,
    META_TYPE_ACLS = 4,
    META_TYPE_XATTRS = 5,
}

impl ::protobuf::ProtobufEnum for MetadataUpdateType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<MetadataUpdateType> {
        match value {
            0 => ::std::option::Option::Some(MetadataUpdateType::META_TYPE_TIMES),
            1 => ::std::option::Option::Some(MetadataUpdateType::META_TYPE_REPLICATION),
            2 => ::std::option::Option::Some(MetadataUpdateType::META_TYPE_OWNER),
            3 => ::std::option::Option::Some(MetadataUpdateType::META_TYPE_PERMS),
            4 => ::std::option::Option::Some(MetadataUpdateType::META_TYPE_ACLS),
            5 => ::std::option::Option::Some(MetadataUpdateType::META_TYPE_XATTRS),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [MetadataUpdateType] = &[
            MetadataUpdateType::META_TYPE_TIMES,
            MetadataUpdateType::META_TYPE_REPLICATION,
            MetadataUpdateType::META_TYPE_OWNER,
            MetadataUpdateType::META_TYPE_PERMS,
            MetadataUpdateType::META_TYPE_ACLS,
            MetadataUpdateType::META_TYPE_XATTRS,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<MetadataUpdateType>("MetadataUpdateType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for MetadataUpdateType {
}

impl ::std::default::Default for MetadataUpdateType {
    fn default() -> Self {
        MetadataUpdateType::META_TYPE_TIMES
    }
}

impl ::protobuf::reflect::ProtobufValue for MetadataUpdateType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rinotify.proto\x12\x0bhadoop.hdfs\x1a\tacl.proto\x1a\x0bxattr.proto\
    \x1a\nhdfs.proto\"T\n\nEventProto\x12*\n\x04type\x18\x01\x20\x02(\x0e2\
    \x16.hadoop.hdfs.EventTypeR\x04type\x12\x1a\n\x08contents\x18\x02\x20\
    \x02(\x0cR\x08contents\"V\n\x0fEventBatchProto\x12\x12\n\x04txid\x18\x01\
    \x20\x02(\x03R\x04txid\x12/\n\x06events\x18\x02\x20\x03(\x0b2\x17.hadoop\
    .hdfs.EventProtoR\x06events\"\x93\x03\n\x10CreateEventProto\x12*\n\x04ty\
    pe\x18\x01\x20\x02(\x0e2\x16.hadoop.hdfs.INodeTypeR\x04type\x12\x12\n\
    \x04path\x18\x02\x20\x02(\tR\x04path\x12\x14\n\x05ctime\x18\x03\x20\x02(\
    \x03R\x05ctime\x12\x1c\n\townerName\x18\x04\x20\x02(\tR\townerName\x12\
    \x1c\n\tgroupName\x18\x05\x20\x02(\tR\tgroupName\x124\n\x05perms\x18\x06\
    \x20\x02(\x0b2\x1e.hadoop.hdfs.FsPermissionProtoR\x05perms\x12\x20\n\x0b\
    replication\x18\x07\x20\x01(\x05R\x0breplication\x12$\n\rsymlinkTarget\
    \x18\x08\x20\x01(\tR\rsymlinkTarget\x12\x1c\n\toverwrite\x18\t\x20\x01(\
    \x08R\toverwrite\x12-\n\x10defaultBlockSize\x18\n\x20\x01(\x03:\x010R\
    \x10defaultBlockSize\x12\"\n\x0cerasureCoded\x18\x0b\x20\x01(\x08R\x0cer\
    asureCoded\"_\n\x0fCloseEventProto\x12\x12\n\x04path\x18\x01\x20\x02(\tR\
    \x04path\x12\x1a\n\x08fileSize\x18\x02\x20\x02(\x03R\x08fileSize\x12\x1c\
    \n\ttimestamp\x18\x03\x20\x02(\x03R\ttimestamp\"b\n\x12TruncateEventProt\
    o\x12\x12\n\x04path\x18\x01\x20\x02(\tR\x04path\x12\x1a\n\x08fileSize\
    \x18\x02\x20\x02(\x03R\x08fileSize\x12\x1c\n\ttimestamp\x18\x03\x20\x02(\
    \x03R\ttimestamp\"I\n\x10AppendEventProto\x12\x12\n\x04path\x18\x01\x20\
    \x02(\tR\x04path\x12!\n\x08newBlock\x18\x02\x20\x01(\x08:\x05falseR\x08n\
    ewBlock\"f\n\x10RenameEventProto\x12\x18\n\x07srcPath\x18\x01\x20\x02(\t\
    R\x07srcPath\x12\x1a\n\x08destPath\x18\x02\x20\x02(\tR\x08destPath\x12\
    \x1c\n\ttimestamp\x18\x03\x20\x02(\x03R\ttimestamp\"\xaa\x03\n\x18Metada\
    taUpdateEventProto\x12\x12\n\x04path\x18\x01\x20\x02(\tR\x04path\x123\n\
    \x04type\x18\x02\x20\x02(\x0e2\x1f.hadoop.hdfs.MetadataUpdateTypeR\x04ty\
    pe\x12\x14\n\x05mtime\x18\x03\x20\x01(\x03R\x05mtime\x12\x14\n\x05atime\
    \x18\x04\x20\x01(\x03R\x05atime\x12\x20\n\x0breplication\x18\x05\x20\x01\
    (\x05R\x0breplication\x12\x1c\n\townerName\x18\x06\x20\x01(\tR\townerNam\
    e\x12\x1c\n\tgroupName\x18\x07\x20\x01(\tR\tgroupName\x124\n\x05perms\
    \x18\x08\x20\x01(\x0b2\x1e.hadoop.hdfs.FsPermissionProtoR\x05perms\x12.\
    \n\x04acls\x18\t\x20\x03(\x0b2\x1a.hadoop.hdfs.AclEntryProtoR\x04acls\
    \x12/\n\x06xAttrs\x18\n\x20\x03(\x0b2\x17.hadoop.hdfs.XAttrProtoR\x06xAt\
    trs\x12$\n\rxAttrsRemoved\x18\x0b\x20\x01(\x08R\rxAttrsRemoved\"D\n\x10U\
    nlinkEventProto\x12\x12\n\x04path\x18\x01\x20\x02(\tR\x04path\x12\x1c\n\
    \ttimestamp\x18\x02\x20\x02(\x03R\ttimestamp\"\xcc\x01\n\x0fEventsListPr\
    oto\x12/\n\x06events\x18\x01\x20\x03(\x0b2\x17.hadoop.hdfs.EventProtoR\
    \x06events\x12\x1c\n\tfirstTxid\x18\x02\x20\x02(\x03R\tfirstTxid\x12\x1a\
    \n\x08lastTxid\x18\x03\x20\x02(\x03R\x08lastTxid\x12\x1a\n\x08syncTxid\
    \x18\x04\x20\x02(\x03R\x08syncTxid\x122\n\x05batch\x18\x05\x20\x03(\x0b2\
    \x1c.hadoop.hdfs.EventBatchProtoR\x05batch*\x8c\x01\n\tEventType\x12\x10\
    \n\x0cEVENT_CREATE\x10\0\x12\x0f\n\x0bEVENT_CLOSE\x10\x01\x12\x10\n\x0cE\
    VENT_APPEND\x10\x02\x12\x10\n\x0cEVENT_RENAME\x10\x03\x12\x12\n\x0eEVENT\
    _METADATA\x10\x04\x12\x10\n\x0cEVENT_UNLINK\x10\x05\x12\x12\n\x0eEVENT_T\
    RUNCATE\x10\x06*F\n\tINodeType\x12\x0f\n\x0bI_TYPE_FILE\x10\0\x12\x14\n\
    \x10I_TYPE_DIRECTORY\x10\x01\x12\x12\n\x0eI_TYPE_SYMLINK\x10\x02*\x98\
    \x01\n\x12MetadataUpdateType\x12\x13\n\x0fMETA_TYPE_TIMES\x10\0\x12\x19\
    \n\x15META_TYPE_REPLICATION\x10\x01\x12\x13\n\x0fMETA_TYPE_OWNER\x10\x02\
    \x12\x13\n\x0fMETA_TYPE_PERMS\x10\x03\x12\x12\n\x0eMETA_TYPE_ACLS\x10\
    \x04\x12\x14\n\x10META_TYPE_XATTRS\x10\x05B9\n%org.apache.hadoop.hdfs.pr\
    otocol.protoB\rInotifyProtos\xa0\x01\x01\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
