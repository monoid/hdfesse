// This file is generated by rust-protobuf 2.23.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `erasurecoding.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_23_0;

#[derive(PartialEq,Clone,Default)]
pub struct SetErasureCodingPolicyRequestProto {
    // message fields
    src: ::protobuf::SingularField<::std::string::String>,
    ecPolicyName: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SetErasureCodingPolicyRequestProto {
    fn default() -> &'a SetErasureCodingPolicyRequestProto {
        <SetErasureCodingPolicyRequestProto as ::protobuf::Message>::default_instance()
    }
}

impl SetErasureCodingPolicyRequestProto {
    pub fn new() -> SetErasureCodingPolicyRequestProto {
        ::std::default::Default::default()
    }

    // required string src = 1;


    pub fn get_src(&self) -> &str {
        match self.src.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_src(&mut self) {
        self.src.clear();
    }

    pub fn has_src(&self) -> bool {
        self.src.is_some()
    }

    // Param is passed by value, moved
    pub fn set_src(&mut self, v: ::std::string::String) {
        self.src = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_src(&mut self) -> &mut ::std::string::String {
        if self.src.is_none() {
            self.src.set_default();
        }
        self.src.as_mut().unwrap()
    }

    // Take field
    pub fn take_src(&mut self) -> ::std::string::String {
        self.src.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string ecPolicyName = 2;


    pub fn get_ecPolicyName(&self) -> &str {
        match self.ecPolicyName.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_ecPolicyName(&mut self) {
        self.ecPolicyName.clear();
    }

    pub fn has_ecPolicyName(&self) -> bool {
        self.ecPolicyName.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ecPolicyName(&mut self, v: ::std::string::String) {
        self.ecPolicyName = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ecPolicyName(&mut self) -> &mut ::std::string::String {
        if self.ecPolicyName.is_none() {
            self.ecPolicyName.set_default();
        }
        self.ecPolicyName.as_mut().unwrap()
    }

    // Take field
    pub fn take_ecPolicyName(&mut self) -> ::std::string::String {
        self.ecPolicyName.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for SetErasureCodingPolicyRequestProto {
    fn is_initialized(&self) -> bool {
        if self.src.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.src)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.ecPolicyName)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.src.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(ref v) = self.ecPolicyName.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.src.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(ref v) = self.ecPolicyName.as_ref() {
            os.write_string(2, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SetErasureCodingPolicyRequestProto {
        SetErasureCodingPolicyRequestProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "src",
                |m: &SetErasureCodingPolicyRequestProto| { &m.src },
                |m: &mut SetErasureCodingPolicyRequestProto| { &mut m.src },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "ecPolicyName",
                |m: &SetErasureCodingPolicyRequestProto| { &m.ecPolicyName },
                |m: &mut SetErasureCodingPolicyRequestProto| { &mut m.ecPolicyName },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SetErasureCodingPolicyRequestProto>(
                "SetErasureCodingPolicyRequestProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SetErasureCodingPolicyRequestProto {
        static instance: ::protobuf::rt::LazyV2<SetErasureCodingPolicyRequestProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SetErasureCodingPolicyRequestProto::new)
    }
}

impl ::protobuf::Clear for SetErasureCodingPolicyRequestProto {
    fn clear(&mut self) {
        self.src.clear();
        self.ecPolicyName.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SetErasureCodingPolicyRequestProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SetErasureCodingPolicyRequestProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SetErasureCodingPolicyResponseProto {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SetErasureCodingPolicyResponseProto {
    fn default() -> &'a SetErasureCodingPolicyResponseProto {
        <SetErasureCodingPolicyResponseProto as ::protobuf::Message>::default_instance()
    }
}

impl SetErasureCodingPolicyResponseProto {
    pub fn new() -> SetErasureCodingPolicyResponseProto {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for SetErasureCodingPolicyResponseProto {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SetErasureCodingPolicyResponseProto {
        SetErasureCodingPolicyResponseProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SetErasureCodingPolicyResponseProto>(
                "SetErasureCodingPolicyResponseProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SetErasureCodingPolicyResponseProto {
        static instance: ::protobuf::rt::LazyV2<SetErasureCodingPolicyResponseProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SetErasureCodingPolicyResponseProto::new)
    }
}

impl ::protobuf::Clear for SetErasureCodingPolicyResponseProto {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SetErasureCodingPolicyResponseProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SetErasureCodingPolicyResponseProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetErasureCodingPoliciesRequestProto {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetErasureCodingPoliciesRequestProto {
    fn default() -> &'a GetErasureCodingPoliciesRequestProto {
        <GetErasureCodingPoliciesRequestProto as ::protobuf::Message>::default_instance()
    }
}

impl GetErasureCodingPoliciesRequestProto {
    pub fn new() -> GetErasureCodingPoliciesRequestProto {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for GetErasureCodingPoliciesRequestProto {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetErasureCodingPoliciesRequestProto {
        GetErasureCodingPoliciesRequestProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetErasureCodingPoliciesRequestProto>(
                "GetErasureCodingPoliciesRequestProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetErasureCodingPoliciesRequestProto {
        static instance: ::protobuf::rt::LazyV2<GetErasureCodingPoliciesRequestProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetErasureCodingPoliciesRequestProto::new)
    }
}

impl ::protobuf::Clear for GetErasureCodingPoliciesRequestProto {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetErasureCodingPoliciesRequestProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetErasureCodingPoliciesRequestProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetErasureCodingPoliciesResponseProto {
    // message fields
    pub ecPolicies: ::protobuf::RepeatedField<super::hdfs::ErasureCodingPolicyProto>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetErasureCodingPoliciesResponseProto {
    fn default() -> &'a GetErasureCodingPoliciesResponseProto {
        <GetErasureCodingPoliciesResponseProto as ::protobuf::Message>::default_instance()
    }
}

impl GetErasureCodingPoliciesResponseProto {
    pub fn new() -> GetErasureCodingPoliciesResponseProto {
        ::std::default::Default::default()
    }

    // repeated .hadoop.hdfs.ErasureCodingPolicyProto ecPolicies = 1;


    pub fn get_ecPolicies(&self) -> &[super::hdfs::ErasureCodingPolicyProto] {
        &self.ecPolicies
    }
    pub fn clear_ecPolicies(&mut self) {
        self.ecPolicies.clear();
    }

    // Param is passed by value, moved
    pub fn set_ecPolicies(&mut self, v: ::protobuf::RepeatedField<super::hdfs::ErasureCodingPolicyProto>) {
        self.ecPolicies = v;
    }

    // Mutable pointer to the field.
    pub fn mut_ecPolicies(&mut self) -> &mut ::protobuf::RepeatedField<super::hdfs::ErasureCodingPolicyProto> {
        &mut self.ecPolicies
    }

    // Take field
    pub fn take_ecPolicies(&mut self) -> ::protobuf::RepeatedField<super::hdfs::ErasureCodingPolicyProto> {
        ::std::mem::replace(&mut self.ecPolicies, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for GetErasureCodingPoliciesResponseProto {
    fn is_initialized(&self) -> bool {
        for v in &self.ecPolicies {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.ecPolicies)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.ecPolicies {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.ecPolicies {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetErasureCodingPoliciesResponseProto {
        GetErasureCodingPoliciesResponseProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::hdfs::ErasureCodingPolicyProto>>(
                "ecPolicies",
                |m: &GetErasureCodingPoliciesResponseProto| { &m.ecPolicies },
                |m: &mut GetErasureCodingPoliciesResponseProto| { &mut m.ecPolicies },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetErasureCodingPoliciesResponseProto>(
                "GetErasureCodingPoliciesResponseProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetErasureCodingPoliciesResponseProto {
        static instance: ::protobuf::rt::LazyV2<GetErasureCodingPoliciesResponseProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetErasureCodingPoliciesResponseProto::new)
    }
}

impl ::protobuf::Clear for GetErasureCodingPoliciesResponseProto {
    fn clear(&mut self) {
        self.ecPolicies.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetErasureCodingPoliciesResponseProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetErasureCodingPoliciesResponseProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetErasureCodingCodecsRequestProto {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetErasureCodingCodecsRequestProto {
    fn default() -> &'a GetErasureCodingCodecsRequestProto {
        <GetErasureCodingCodecsRequestProto as ::protobuf::Message>::default_instance()
    }
}

impl GetErasureCodingCodecsRequestProto {
    pub fn new() -> GetErasureCodingCodecsRequestProto {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for GetErasureCodingCodecsRequestProto {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetErasureCodingCodecsRequestProto {
        GetErasureCodingCodecsRequestProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetErasureCodingCodecsRequestProto>(
                "GetErasureCodingCodecsRequestProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetErasureCodingCodecsRequestProto {
        static instance: ::protobuf::rt::LazyV2<GetErasureCodingCodecsRequestProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetErasureCodingCodecsRequestProto::new)
    }
}

impl ::protobuf::Clear for GetErasureCodingCodecsRequestProto {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetErasureCodingCodecsRequestProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetErasureCodingCodecsRequestProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetErasureCodingCodecsResponseProto {
    // message fields
    pub codec: ::protobuf::RepeatedField<CodecProto>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetErasureCodingCodecsResponseProto {
    fn default() -> &'a GetErasureCodingCodecsResponseProto {
        <GetErasureCodingCodecsResponseProto as ::protobuf::Message>::default_instance()
    }
}

impl GetErasureCodingCodecsResponseProto {
    pub fn new() -> GetErasureCodingCodecsResponseProto {
        ::std::default::Default::default()
    }

    // repeated .hadoop.hdfs.CodecProto codec = 1;


    pub fn get_codec(&self) -> &[CodecProto] {
        &self.codec
    }
    pub fn clear_codec(&mut self) {
        self.codec.clear();
    }

    // Param is passed by value, moved
    pub fn set_codec(&mut self, v: ::protobuf::RepeatedField<CodecProto>) {
        self.codec = v;
    }

    // Mutable pointer to the field.
    pub fn mut_codec(&mut self) -> &mut ::protobuf::RepeatedField<CodecProto> {
        &mut self.codec
    }

    // Take field
    pub fn take_codec(&mut self) -> ::protobuf::RepeatedField<CodecProto> {
        ::std::mem::replace(&mut self.codec, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for GetErasureCodingCodecsResponseProto {
    fn is_initialized(&self) -> bool {
        for v in &self.codec {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.codec)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.codec {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.codec {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetErasureCodingCodecsResponseProto {
        GetErasureCodingCodecsResponseProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CodecProto>>(
                "codec",
                |m: &GetErasureCodingCodecsResponseProto| { &m.codec },
                |m: &mut GetErasureCodingCodecsResponseProto| { &mut m.codec },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetErasureCodingCodecsResponseProto>(
                "GetErasureCodingCodecsResponseProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetErasureCodingCodecsResponseProto {
        static instance: ::protobuf::rt::LazyV2<GetErasureCodingCodecsResponseProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetErasureCodingCodecsResponseProto::new)
    }
}

impl ::protobuf::Clear for GetErasureCodingCodecsResponseProto {
    fn clear(&mut self) {
        self.codec.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetErasureCodingCodecsResponseProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetErasureCodingCodecsResponseProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetErasureCodingPolicyRequestProto {
    // message fields
    src: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetErasureCodingPolicyRequestProto {
    fn default() -> &'a GetErasureCodingPolicyRequestProto {
        <GetErasureCodingPolicyRequestProto as ::protobuf::Message>::default_instance()
    }
}

impl GetErasureCodingPolicyRequestProto {
    pub fn new() -> GetErasureCodingPolicyRequestProto {
        ::std::default::Default::default()
    }

    // required string src = 1;


    pub fn get_src(&self) -> &str {
        match self.src.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_src(&mut self) {
        self.src.clear();
    }

    pub fn has_src(&self) -> bool {
        self.src.is_some()
    }

    // Param is passed by value, moved
    pub fn set_src(&mut self, v: ::std::string::String) {
        self.src = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_src(&mut self) -> &mut ::std::string::String {
        if self.src.is_none() {
            self.src.set_default();
        }
        self.src.as_mut().unwrap()
    }

    // Take field
    pub fn take_src(&mut self) -> ::std::string::String {
        self.src.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for GetErasureCodingPolicyRequestProto {
    fn is_initialized(&self) -> bool {
        if self.src.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.src)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.src.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.src.as_ref() {
            os.write_string(1, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetErasureCodingPolicyRequestProto {
        GetErasureCodingPolicyRequestProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "src",
                |m: &GetErasureCodingPolicyRequestProto| { &m.src },
                |m: &mut GetErasureCodingPolicyRequestProto| { &mut m.src },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetErasureCodingPolicyRequestProto>(
                "GetErasureCodingPolicyRequestProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetErasureCodingPolicyRequestProto {
        static instance: ::protobuf::rt::LazyV2<GetErasureCodingPolicyRequestProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetErasureCodingPolicyRequestProto::new)
    }
}

impl ::protobuf::Clear for GetErasureCodingPolicyRequestProto {
    fn clear(&mut self) {
        self.src.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetErasureCodingPolicyRequestProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetErasureCodingPolicyRequestProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetErasureCodingPolicyResponseProto {
    // message fields
    pub ecPolicy: ::protobuf::SingularPtrField<super::hdfs::ErasureCodingPolicyProto>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetErasureCodingPolicyResponseProto {
    fn default() -> &'a GetErasureCodingPolicyResponseProto {
        <GetErasureCodingPolicyResponseProto as ::protobuf::Message>::default_instance()
    }
}

impl GetErasureCodingPolicyResponseProto {
    pub fn new() -> GetErasureCodingPolicyResponseProto {
        ::std::default::Default::default()
    }

    // optional .hadoop.hdfs.ErasureCodingPolicyProto ecPolicy = 1;


    pub fn get_ecPolicy(&self) -> &super::hdfs::ErasureCodingPolicyProto {
        self.ecPolicy.as_ref().unwrap_or_else(|| <super::hdfs::ErasureCodingPolicyProto as ::protobuf::Message>::default_instance())
    }
    pub fn clear_ecPolicy(&mut self) {
        self.ecPolicy.clear();
    }

    pub fn has_ecPolicy(&self) -> bool {
        self.ecPolicy.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ecPolicy(&mut self, v: super::hdfs::ErasureCodingPolicyProto) {
        self.ecPolicy = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ecPolicy(&mut self) -> &mut super::hdfs::ErasureCodingPolicyProto {
        if self.ecPolicy.is_none() {
            self.ecPolicy.set_default();
        }
        self.ecPolicy.as_mut().unwrap()
    }

    // Take field
    pub fn take_ecPolicy(&mut self) -> super::hdfs::ErasureCodingPolicyProto {
        self.ecPolicy.take().unwrap_or_else(|| super::hdfs::ErasureCodingPolicyProto::new())
    }
}

impl ::protobuf::Message for GetErasureCodingPolicyResponseProto {
    fn is_initialized(&self) -> bool {
        for v in &self.ecPolicy {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.ecPolicy)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.ecPolicy.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.ecPolicy.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetErasureCodingPolicyResponseProto {
        GetErasureCodingPolicyResponseProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::hdfs::ErasureCodingPolicyProto>>(
                "ecPolicy",
                |m: &GetErasureCodingPolicyResponseProto| { &m.ecPolicy },
                |m: &mut GetErasureCodingPolicyResponseProto| { &mut m.ecPolicy },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetErasureCodingPolicyResponseProto>(
                "GetErasureCodingPolicyResponseProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetErasureCodingPolicyResponseProto {
        static instance: ::protobuf::rt::LazyV2<GetErasureCodingPolicyResponseProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetErasureCodingPolicyResponseProto::new)
    }
}

impl ::protobuf::Clear for GetErasureCodingPolicyResponseProto {
    fn clear(&mut self) {
        self.ecPolicy.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetErasureCodingPolicyResponseProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetErasureCodingPolicyResponseProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AddErasureCodingPoliciesRequestProto {
    // message fields
    pub ecPolicies: ::protobuf::RepeatedField<super::hdfs::ErasureCodingPolicyProto>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AddErasureCodingPoliciesRequestProto {
    fn default() -> &'a AddErasureCodingPoliciesRequestProto {
        <AddErasureCodingPoliciesRequestProto as ::protobuf::Message>::default_instance()
    }
}

impl AddErasureCodingPoliciesRequestProto {
    pub fn new() -> AddErasureCodingPoliciesRequestProto {
        ::std::default::Default::default()
    }

    // repeated .hadoop.hdfs.ErasureCodingPolicyProto ecPolicies = 1;


    pub fn get_ecPolicies(&self) -> &[super::hdfs::ErasureCodingPolicyProto] {
        &self.ecPolicies
    }
    pub fn clear_ecPolicies(&mut self) {
        self.ecPolicies.clear();
    }

    // Param is passed by value, moved
    pub fn set_ecPolicies(&mut self, v: ::protobuf::RepeatedField<super::hdfs::ErasureCodingPolicyProto>) {
        self.ecPolicies = v;
    }

    // Mutable pointer to the field.
    pub fn mut_ecPolicies(&mut self) -> &mut ::protobuf::RepeatedField<super::hdfs::ErasureCodingPolicyProto> {
        &mut self.ecPolicies
    }

    // Take field
    pub fn take_ecPolicies(&mut self) -> ::protobuf::RepeatedField<super::hdfs::ErasureCodingPolicyProto> {
        ::std::mem::replace(&mut self.ecPolicies, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for AddErasureCodingPoliciesRequestProto {
    fn is_initialized(&self) -> bool {
        for v in &self.ecPolicies {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.ecPolicies)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.ecPolicies {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.ecPolicies {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AddErasureCodingPoliciesRequestProto {
        AddErasureCodingPoliciesRequestProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::hdfs::ErasureCodingPolicyProto>>(
                "ecPolicies",
                |m: &AddErasureCodingPoliciesRequestProto| { &m.ecPolicies },
                |m: &mut AddErasureCodingPoliciesRequestProto| { &mut m.ecPolicies },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AddErasureCodingPoliciesRequestProto>(
                "AddErasureCodingPoliciesRequestProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AddErasureCodingPoliciesRequestProto {
        static instance: ::protobuf::rt::LazyV2<AddErasureCodingPoliciesRequestProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AddErasureCodingPoliciesRequestProto::new)
    }
}

impl ::protobuf::Clear for AddErasureCodingPoliciesRequestProto {
    fn clear(&mut self) {
        self.ecPolicies.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AddErasureCodingPoliciesRequestProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AddErasureCodingPoliciesRequestProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AddErasureCodingPoliciesResponseProto {
    // message fields
    pub responses: ::protobuf::RepeatedField<super::hdfs::AddErasureCodingPolicyResponseProto>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AddErasureCodingPoliciesResponseProto {
    fn default() -> &'a AddErasureCodingPoliciesResponseProto {
        <AddErasureCodingPoliciesResponseProto as ::protobuf::Message>::default_instance()
    }
}

impl AddErasureCodingPoliciesResponseProto {
    pub fn new() -> AddErasureCodingPoliciesResponseProto {
        ::std::default::Default::default()
    }

    // repeated .hadoop.hdfs.AddErasureCodingPolicyResponseProto responses = 1;


    pub fn get_responses(&self) -> &[super::hdfs::AddErasureCodingPolicyResponseProto] {
        &self.responses
    }
    pub fn clear_responses(&mut self) {
        self.responses.clear();
    }

    // Param is passed by value, moved
    pub fn set_responses(&mut self, v: ::protobuf::RepeatedField<super::hdfs::AddErasureCodingPolicyResponseProto>) {
        self.responses = v;
    }

    // Mutable pointer to the field.
    pub fn mut_responses(&mut self) -> &mut ::protobuf::RepeatedField<super::hdfs::AddErasureCodingPolicyResponseProto> {
        &mut self.responses
    }

    // Take field
    pub fn take_responses(&mut self) -> ::protobuf::RepeatedField<super::hdfs::AddErasureCodingPolicyResponseProto> {
        ::std::mem::replace(&mut self.responses, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for AddErasureCodingPoliciesResponseProto {
    fn is_initialized(&self) -> bool {
        for v in &self.responses {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.responses)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.responses {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.responses {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AddErasureCodingPoliciesResponseProto {
        AddErasureCodingPoliciesResponseProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::hdfs::AddErasureCodingPolicyResponseProto>>(
                "responses",
                |m: &AddErasureCodingPoliciesResponseProto| { &m.responses },
                |m: &mut AddErasureCodingPoliciesResponseProto| { &mut m.responses },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AddErasureCodingPoliciesResponseProto>(
                "AddErasureCodingPoliciesResponseProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AddErasureCodingPoliciesResponseProto {
        static instance: ::protobuf::rt::LazyV2<AddErasureCodingPoliciesResponseProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AddErasureCodingPoliciesResponseProto::new)
    }
}

impl ::protobuf::Clear for AddErasureCodingPoliciesResponseProto {
    fn clear(&mut self) {
        self.responses.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AddErasureCodingPoliciesResponseProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AddErasureCodingPoliciesResponseProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RemoveErasureCodingPolicyRequestProto {
    // message fields
    ecPolicyName: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RemoveErasureCodingPolicyRequestProto {
    fn default() -> &'a RemoveErasureCodingPolicyRequestProto {
        <RemoveErasureCodingPolicyRequestProto as ::protobuf::Message>::default_instance()
    }
}

impl RemoveErasureCodingPolicyRequestProto {
    pub fn new() -> RemoveErasureCodingPolicyRequestProto {
        ::std::default::Default::default()
    }

    // required string ecPolicyName = 1;


    pub fn get_ecPolicyName(&self) -> &str {
        match self.ecPolicyName.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_ecPolicyName(&mut self) {
        self.ecPolicyName.clear();
    }

    pub fn has_ecPolicyName(&self) -> bool {
        self.ecPolicyName.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ecPolicyName(&mut self, v: ::std::string::String) {
        self.ecPolicyName = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ecPolicyName(&mut self) -> &mut ::std::string::String {
        if self.ecPolicyName.is_none() {
            self.ecPolicyName.set_default();
        }
        self.ecPolicyName.as_mut().unwrap()
    }

    // Take field
    pub fn take_ecPolicyName(&mut self) -> ::std::string::String {
        self.ecPolicyName.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for RemoveErasureCodingPolicyRequestProto {
    fn is_initialized(&self) -> bool {
        if self.ecPolicyName.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.ecPolicyName)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.ecPolicyName.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.ecPolicyName.as_ref() {
            os.write_string(1, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RemoveErasureCodingPolicyRequestProto {
        RemoveErasureCodingPolicyRequestProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "ecPolicyName",
                |m: &RemoveErasureCodingPolicyRequestProto| { &m.ecPolicyName },
                |m: &mut RemoveErasureCodingPolicyRequestProto| { &mut m.ecPolicyName },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RemoveErasureCodingPolicyRequestProto>(
                "RemoveErasureCodingPolicyRequestProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RemoveErasureCodingPolicyRequestProto {
        static instance: ::protobuf::rt::LazyV2<RemoveErasureCodingPolicyRequestProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RemoveErasureCodingPolicyRequestProto::new)
    }
}

impl ::protobuf::Clear for RemoveErasureCodingPolicyRequestProto {
    fn clear(&mut self) {
        self.ecPolicyName.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RemoveErasureCodingPolicyRequestProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RemoveErasureCodingPolicyRequestProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RemoveErasureCodingPolicyResponseProto {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RemoveErasureCodingPolicyResponseProto {
    fn default() -> &'a RemoveErasureCodingPolicyResponseProto {
        <RemoveErasureCodingPolicyResponseProto as ::protobuf::Message>::default_instance()
    }
}

impl RemoveErasureCodingPolicyResponseProto {
    pub fn new() -> RemoveErasureCodingPolicyResponseProto {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for RemoveErasureCodingPolicyResponseProto {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RemoveErasureCodingPolicyResponseProto {
        RemoveErasureCodingPolicyResponseProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RemoveErasureCodingPolicyResponseProto>(
                "RemoveErasureCodingPolicyResponseProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RemoveErasureCodingPolicyResponseProto {
        static instance: ::protobuf::rt::LazyV2<RemoveErasureCodingPolicyResponseProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RemoveErasureCodingPolicyResponseProto::new)
    }
}

impl ::protobuf::Clear for RemoveErasureCodingPolicyResponseProto {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RemoveErasureCodingPolicyResponseProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RemoveErasureCodingPolicyResponseProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EnableErasureCodingPolicyRequestProto {
    // message fields
    ecPolicyName: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EnableErasureCodingPolicyRequestProto {
    fn default() -> &'a EnableErasureCodingPolicyRequestProto {
        <EnableErasureCodingPolicyRequestProto as ::protobuf::Message>::default_instance()
    }
}

impl EnableErasureCodingPolicyRequestProto {
    pub fn new() -> EnableErasureCodingPolicyRequestProto {
        ::std::default::Default::default()
    }

    // required string ecPolicyName = 1;


    pub fn get_ecPolicyName(&self) -> &str {
        match self.ecPolicyName.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_ecPolicyName(&mut self) {
        self.ecPolicyName.clear();
    }

    pub fn has_ecPolicyName(&self) -> bool {
        self.ecPolicyName.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ecPolicyName(&mut self, v: ::std::string::String) {
        self.ecPolicyName = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ecPolicyName(&mut self) -> &mut ::std::string::String {
        if self.ecPolicyName.is_none() {
            self.ecPolicyName.set_default();
        }
        self.ecPolicyName.as_mut().unwrap()
    }

    // Take field
    pub fn take_ecPolicyName(&mut self) -> ::std::string::String {
        self.ecPolicyName.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for EnableErasureCodingPolicyRequestProto {
    fn is_initialized(&self) -> bool {
        if self.ecPolicyName.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.ecPolicyName)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.ecPolicyName.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.ecPolicyName.as_ref() {
            os.write_string(1, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EnableErasureCodingPolicyRequestProto {
        EnableErasureCodingPolicyRequestProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "ecPolicyName",
                |m: &EnableErasureCodingPolicyRequestProto| { &m.ecPolicyName },
                |m: &mut EnableErasureCodingPolicyRequestProto| { &mut m.ecPolicyName },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<EnableErasureCodingPolicyRequestProto>(
                "EnableErasureCodingPolicyRequestProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static EnableErasureCodingPolicyRequestProto {
        static instance: ::protobuf::rt::LazyV2<EnableErasureCodingPolicyRequestProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EnableErasureCodingPolicyRequestProto::new)
    }
}

impl ::protobuf::Clear for EnableErasureCodingPolicyRequestProto {
    fn clear(&mut self) {
        self.ecPolicyName.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EnableErasureCodingPolicyRequestProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EnableErasureCodingPolicyRequestProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EnableErasureCodingPolicyResponseProto {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EnableErasureCodingPolicyResponseProto {
    fn default() -> &'a EnableErasureCodingPolicyResponseProto {
        <EnableErasureCodingPolicyResponseProto as ::protobuf::Message>::default_instance()
    }
}

impl EnableErasureCodingPolicyResponseProto {
    pub fn new() -> EnableErasureCodingPolicyResponseProto {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for EnableErasureCodingPolicyResponseProto {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EnableErasureCodingPolicyResponseProto {
        EnableErasureCodingPolicyResponseProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<EnableErasureCodingPolicyResponseProto>(
                "EnableErasureCodingPolicyResponseProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static EnableErasureCodingPolicyResponseProto {
        static instance: ::protobuf::rt::LazyV2<EnableErasureCodingPolicyResponseProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EnableErasureCodingPolicyResponseProto::new)
    }
}

impl ::protobuf::Clear for EnableErasureCodingPolicyResponseProto {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EnableErasureCodingPolicyResponseProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EnableErasureCodingPolicyResponseProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DisableErasureCodingPolicyRequestProto {
    // message fields
    ecPolicyName: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DisableErasureCodingPolicyRequestProto {
    fn default() -> &'a DisableErasureCodingPolicyRequestProto {
        <DisableErasureCodingPolicyRequestProto as ::protobuf::Message>::default_instance()
    }
}

impl DisableErasureCodingPolicyRequestProto {
    pub fn new() -> DisableErasureCodingPolicyRequestProto {
        ::std::default::Default::default()
    }

    // required string ecPolicyName = 1;


    pub fn get_ecPolicyName(&self) -> &str {
        match self.ecPolicyName.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_ecPolicyName(&mut self) {
        self.ecPolicyName.clear();
    }

    pub fn has_ecPolicyName(&self) -> bool {
        self.ecPolicyName.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ecPolicyName(&mut self, v: ::std::string::String) {
        self.ecPolicyName = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ecPolicyName(&mut self) -> &mut ::std::string::String {
        if self.ecPolicyName.is_none() {
            self.ecPolicyName.set_default();
        }
        self.ecPolicyName.as_mut().unwrap()
    }

    // Take field
    pub fn take_ecPolicyName(&mut self) -> ::std::string::String {
        self.ecPolicyName.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for DisableErasureCodingPolicyRequestProto {
    fn is_initialized(&self) -> bool {
        if self.ecPolicyName.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.ecPolicyName)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.ecPolicyName.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.ecPolicyName.as_ref() {
            os.write_string(1, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DisableErasureCodingPolicyRequestProto {
        DisableErasureCodingPolicyRequestProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "ecPolicyName",
                |m: &DisableErasureCodingPolicyRequestProto| { &m.ecPolicyName },
                |m: &mut DisableErasureCodingPolicyRequestProto| { &mut m.ecPolicyName },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DisableErasureCodingPolicyRequestProto>(
                "DisableErasureCodingPolicyRequestProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DisableErasureCodingPolicyRequestProto {
        static instance: ::protobuf::rt::LazyV2<DisableErasureCodingPolicyRequestProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DisableErasureCodingPolicyRequestProto::new)
    }
}

impl ::protobuf::Clear for DisableErasureCodingPolicyRequestProto {
    fn clear(&mut self) {
        self.ecPolicyName.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DisableErasureCodingPolicyRequestProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DisableErasureCodingPolicyRequestProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DisableErasureCodingPolicyResponseProto {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DisableErasureCodingPolicyResponseProto {
    fn default() -> &'a DisableErasureCodingPolicyResponseProto {
        <DisableErasureCodingPolicyResponseProto as ::protobuf::Message>::default_instance()
    }
}

impl DisableErasureCodingPolicyResponseProto {
    pub fn new() -> DisableErasureCodingPolicyResponseProto {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for DisableErasureCodingPolicyResponseProto {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DisableErasureCodingPolicyResponseProto {
        DisableErasureCodingPolicyResponseProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DisableErasureCodingPolicyResponseProto>(
                "DisableErasureCodingPolicyResponseProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DisableErasureCodingPolicyResponseProto {
        static instance: ::protobuf::rt::LazyV2<DisableErasureCodingPolicyResponseProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DisableErasureCodingPolicyResponseProto::new)
    }
}

impl ::protobuf::Clear for DisableErasureCodingPolicyResponseProto {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DisableErasureCodingPolicyResponseProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DisableErasureCodingPolicyResponseProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UnsetErasureCodingPolicyRequestProto {
    // message fields
    src: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UnsetErasureCodingPolicyRequestProto {
    fn default() -> &'a UnsetErasureCodingPolicyRequestProto {
        <UnsetErasureCodingPolicyRequestProto as ::protobuf::Message>::default_instance()
    }
}

impl UnsetErasureCodingPolicyRequestProto {
    pub fn new() -> UnsetErasureCodingPolicyRequestProto {
        ::std::default::Default::default()
    }

    // required string src = 1;


    pub fn get_src(&self) -> &str {
        match self.src.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_src(&mut self) {
        self.src.clear();
    }

    pub fn has_src(&self) -> bool {
        self.src.is_some()
    }

    // Param is passed by value, moved
    pub fn set_src(&mut self, v: ::std::string::String) {
        self.src = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_src(&mut self) -> &mut ::std::string::String {
        if self.src.is_none() {
            self.src.set_default();
        }
        self.src.as_mut().unwrap()
    }

    // Take field
    pub fn take_src(&mut self) -> ::std::string::String {
        self.src.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for UnsetErasureCodingPolicyRequestProto {
    fn is_initialized(&self) -> bool {
        if self.src.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.src)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.src.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.src.as_ref() {
            os.write_string(1, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UnsetErasureCodingPolicyRequestProto {
        UnsetErasureCodingPolicyRequestProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "src",
                |m: &UnsetErasureCodingPolicyRequestProto| { &m.src },
                |m: &mut UnsetErasureCodingPolicyRequestProto| { &mut m.src },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<UnsetErasureCodingPolicyRequestProto>(
                "UnsetErasureCodingPolicyRequestProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static UnsetErasureCodingPolicyRequestProto {
        static instance: ::protobuf::rt::LazyV2<UnsetErasureCodingPolicyRequestProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(UnsetErasureCodingPolicyRequestProto::new)
    }
}

impl ::protobuf::Clear for UnsetErasureCodingPolicyRequestProto {
    fn clear(&mut self) {
        self.src.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UnsetErasureCodingPolicyRequestProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UnsetErasureCodingPolicyRequestProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UnsetErasureCodingPolicyResponseProto {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UnsetErasureCodingPolicyResponseProto {
    fn default() -> &'a UnsetErasureCodingPolicyResponseProto {
        <UnsetErasureCodingPolicyResponseProto as ::protobuf::Message>::default_instance()
    }
}

impl UnsetErasureCodingPolicyResponseProto {
    pub fn new() -> UnsetErasureCodingPolicyResponseProto {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for UnsetErasureCodingPolicyResponseProto {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UnsetErasureCodingPolicyResponseProto {
        UnsetErasureCodingPolicyResponseProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<UnsetErasureCodingPolicyResponseProto>(
                "UnsetErasureCodingPolicyResponseProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static UnsetErasureCodingPolicyResponseProto {
        static instance: ::protobuf::rt::LazyV2<UnsetErasureCodingPolicyResponseProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(UnsetErasureCodingPolicyResponseProto::new)
    }
}

impl ::protobuf::Clear for UnsetErasureCodingPolicyResponseProto {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UnsetErasureCodingPolicyResponseProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UnsetErasureCodingPolicyResponseProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetECTopologyResultForPoliciesRequestProto {
    // message fields
    pub policies: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetECTopologyResultForPoliciesRequestProto {
    fn default() -> &'a GetECTopologyResultForPoliciesRequestProto {
        <GetECTopologyResultForPoliciesRequestProto as ::protobuf::Message>::default_instance()
    }
}

impl GetECTopologyResultForPoliciesRequestProto {
    pub fn new() -> GetECTopologyResultForPoliciesRequestProto {
        ::std::default::Default::default()
    }

    // repeated string policies = 1;


    pub fn get_policies(&self) -> &[::std::string::String] {
        &self.policies
    }
    pub fn clear_policies(&mut self) {
        self.policies.clear();
    }

    // Param is passed by value, moved
    pub fn set_policies(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.policies = v;
    }

    // Mutable pointer to the field.
    pub fn mut_policies(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.policies
    }

    // Take field
    pub fn take_policies(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.policies, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for GetECTopologyResultForPoliciesRequestProto {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.policies)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.policies {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.policies {
            os.write_string(1, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetECTopologyResultForPoliciesRequestProto {
        GetECTopologyResultForPoliciesRequestProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "policies",
                |m: &GetECTopologyResultForPoliciesRequestProto| { &m.policies },
                |m: &mut GetECTopologyResultForPoliciesRequestProto| { &mut m.policies },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetECTopologyResultForPoliciesRequestProto>(
                "GetECTopologyResultForPoliciesRequestProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetECTopologyResultForPoliciesRequestProto {
        static instance: ::protobuf::rt::LazyV2<GetECTopologyResultForPoliciesRequestProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetECTopologyResultForPoliciesRequestProto::new)
    }
}

impl ::protobuf::Clear for GetECTopologyResultForPoliciesRequestProto {
    fn clear(&mut self) {
        self.policies.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetECTopologyResultForPoliciesRequestProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetECTopologyResultForPoliciesRequestProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetECTopologyResultForPoliciesResponseProto {
    // message fields
    pub response: ::protobuf::SingularPtrField<super::hdfs::ECTopologyVerifierResultProto>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetECTopologyResultForPoliciesResponseProto {
    fn default() -> &'a GetECTopologyResultForPoliciesResponseProto {
        <GetECTopologyResultForPoliciesResponseProto as ::protobuf::Message>::default_instance()
    }
}

impl GetECTopologyResultForPoliciesResponseProto {
    pub fn new() -> GetECTopologyResultForPoliciesResponseProto {
        ::std::default::Default::default()
    }

    // required .hadoop.hdfs.ECTopologyVerifierResultProto response = 1;


    pub fn get_response(&self) -> &super::hdfs::ECTopologyVerifierResultProto {
        self.response.as_ref().unwrap_or_else(|| <super::hdfs::ECTopologyVerifierResultProto as ::protobuf::Message>::default_instance())
    }
    pub fn clear_response(&mut self) {
        self.response.clear();
    }

    pub fn has_response(&self) -> bool {
        self.response.is_some()
    }

    // Param is passed by value, moved
    pub fn set_response(&mut self, v: super::hdfs::ECTopologyVerifierResultProto) {
        self.response = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_response(&mut self) -> &mut super::hdfs::ECTopologyVerifierResultProto {
        if self.response.is_none() {
            self.response.set_default();
        }
        self.response.as_mut().unwrap()
    }

    // Take field
    pub fn take_response(&mut self) -> super::hdfs::ECTopologyVerifierResultProto {
        self.response.take().unwrap_or_else(|| super::hdfs::ECTopologyVerifierResultProto::new())
    }
}

impl ::protobuf::Message for GetECTopologyResultForPoliciesResponseProto {
    fn is_initialized(&self) -> bool {
        if self.response.is_none() {
            return false;
        }
        for v in &self.response {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.response)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.response.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.response.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetECTopologyResultForPoliciesResponseProto {
        GetECTopologyResultForPoliciesResponseProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::hdfs::ECTopologyVerifierResultProto>>(
                "response",
                |m: &GetECTopologyResultForPoliciesResponseProto| { &m.response },
                |m: &mut GetECTopologyResultForPoliciesResponseProto| { &mut m.response },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetECTopologyResultForPoliciesResponseProto>(
                "GetECTopologyResultForPoliciesResponseProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetECTopologyResultForPoliciesResponseProto {
        static instance: ::protobuf::rt::LazyV2<GetECTopologyResultForPoliciesResponseProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetECTopologyResultForPoliciesResponseProto::new)
    }
}

impl ::protobuf::Clear for GetECTopologyResultForPoliciesResponseProto {
    fn clear(&mut self) {
        self.response.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetECTopologyResultForPoliciesResponseProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetECTopologyResultForPoliciesResponseProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BlockECReconstructionInfoProto {
    // message fields
    pub block: ::protobuf::SingularPtrField<super::hdfs::ExtendedBlockProto>,
    pub sourceDnInfos: ::protobuf::SingularPtrField<super::hdfs::DatanodeInfosProto>,
    pub targetDnInfos: ::protobuf::SingularPtrField<super::hdfs::DatanodeInfosProto>,
    pub targetStorageUuids: ::protobuf::SingularPtrField<super::hdfs::StorageUuidsProto>,
    pub targetStorageTypes: ::protobuf::SingularPtrField<super::hdfs::StorageTypesProto>,
    liveBlockIndices: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    pub ecPolicy: ::protobuf::SingularPtrField<super::hdfs::ErasureCodingPolicyProto>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BlockECReconstructionInfoProto {
    fn default() -> &'a BlockECReconstructionInfoProto {
        <BlockECReconstructionInfoProto as ::protobuf::Message>::default_instance()
    }
}

impl BlockECReconstructionInfoProto {
    pub fn new() -> BlockECReconstructionInfoProto {
        ::std::default::Default::default()
    }

    // required .hadoop.hdfs.ExtendedBlockProto block = 1;


    pub fn get_block(&self) -> &super::hdfs::ExtendedBlockProto {
        self.block.as_ref().unwrap_or_else(|| <super::hdfs::ExtendedBlockProto as ::protobuf::Message>::default_instance())
    }
    pub fn clear_block(&mut self) {
        self.block.clear();
    }

    pub fn has_block(&self) -> bool {
        self.block.is_some()
    }

    // Param is passed by value, moved
    pub fn set_block(&mut self, v: super::hdfs::ExtendedBlockProto) {
        self.block = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_block(&mut self) -> &mut super::hdfs::ExtendedBlockProto {
        if self.block.is_none() {
            self.block.set_default();
        }
        self.block.as_mut().unwrap()
    }

    // Take field
    pub fn take_block(&mut self) -> super::hdfs::ExtendedBlockProto {
        self.block.take().unwrap_or_else(|| super::hdfs::ExtendedBlockProto::new())
    }

    // required .hadoop.hdfs.DatanodeInfosProto sourceDnInfos = 2;


    pub fn get_sourceDnInfos(&self) -> &super::hdfs::DatanodeInfosProto {
        self.sourceDnInfos.as_ref().unwrap_or_else(|| <super::hdfs::DatanodeInfosProto as ::protobuf::Message>::default_instance())
    }
    pub fn clear_sourceDnInfos(&mut self) {
        self.sourceDnInfos.clear();
    }

    pub fn has_sourceDnInfos(&self) -> bool {
        self.sourceDnInfos.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sourceDnInfos(&mut self, v: super::hdfs::DatanodeInfosProto) {
        self.sourceDnInfos = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sourceDnInfos(&mut self) -> &mut super::hdfs::DatanodeInfosProto {
        if self.sourceDnInfos.is_none() {
            self.sourceDnInfos.set_default();
        }
        self.sourceDnInfos.as_mut().unwrap()
    }

    // Take field
    pub fn take_sourceDnInfos(&mut self) -> super::hdfs::DatanodeInfosProto {
        self.sourceDnInfos.take().unwrap_or_else(|| super::hdfs::DatanodeInfosProto::new())
    }

    // required .hadoop.hdfs.DatanodeInfosProto targetDnInfos = 3;


    pub fn get_targetDnInfos(&self) -> &super::hdfs::DatanodeInfosProto {
        self.targetDnInfos.as_ref().unwrap_or_else(|| <super::hdfs::DatanodeInfosProto as ::protobuf::Message>::default_instance())
    }
    pub fn clear_targetDnInfos(&mut self) {
        self.targetDnInfos.clear();
    }

    pub fn has_targetDnInfos(&self) -> bool {
        self.targetDnInfos.is_some()
    }

    // Param is passed by value, moved
    pub fn set_targetDnInfos(&mut self, v: super::hdfs::DatanodeInfosProto) {
        self.targetDnInfos = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_targetDnInfos(&mut self) -> &mut super::hdfs::DatanodeInfosProto {
        if self.targetDnInfos.is_none() {
            self.targetDnInfos.set_default();
        }
        self.targetDnInfos.as_mut().unwrap()
    }

    // Take field
    pub fn take_targetDnInfos(&mut self) -> super::hdfs::DatanodeInfosProto {
        self.targetDnInfos.take().unwrap_or_else(|| super::hdfs::DatanodeInfosProto::new())
    }

    // required .hadoop.hdfs.StorageUuidsProto targetStorageUuids = 4;


    pub fn get_targetStorageUuids(&self) -> &super::hdfs::StorageUuidsProto {
        self.targetStorageUuids.as_ref().unwrap_or_else(|| <super::hdfs::StorageUuidsProto as ::protobuf::Message>::default_instance())
    }
    pub fn clear_targetStorageUuids(&mut self) {
        self.targetStorageUuids.clear();
    }

    pub fn has_targetStorageUuids(&self) -> bool {
        self.targetStorageUuids.is_some()
    }

    // Param is passed by value, moved
    pub fn set_targetStorageUuids(&mut self, v: super::hdfs::StorageUuidsProto) {
        self.targetStorageUuids = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_targetStorageUuids(&mut self) -> &mut super::hdfs::StorageUuidsProto {
        if self.targetStorageUuids.is_none() {
            self.targetStorageUuids.set_default();
        }
        self.targetStorageUuids.as_mut().unwrap()
    }

    // Take field
    pub fn take_targetStorageUuids(&mut self) -> super::hdfs::StorageUuidsProto {
        self.targetStorageUuids.take().unwrap_or_else(|| super::hdfs::StorageUuidsProto::new())
    }

    // required .hadoop.hdfs.StorageTypesProto targetStorageTypes = 5;


    pub fn get_targetStorageTypes(&self) -> &super::hdfs::StorageTypesProto {
        self.targetStorageTypes.as_ref().unwrap_or_else(|| <super::hdfs::StorageTypesProto as ::protobuf::Message>::default_instance())
    }
    pub fn clear_targetStorageTypes(&mut self) {
        self.targetStorageTypes.clear();
    }

    pub fn has_targetStorageTypes(&self) -> bool {
        self.targetStorageTypes.is_some()
    }

    // Param is passed by value, moved
    pub fn set_targetStorageTypes(&mut self, v: super::hdfs::StorageTypesProto) {
        self.targetStorageTypes = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_targetStorageTypes(&mut self) -> &mut super::hdfs::StorageTypesProto {
        if self.targetStorageTypes.is_none() {
            self.targetStorageTypes.set_default();
        }
        self.targetStorageTypes.as_mut().unwrap()
    }

    // Take field
    pub fn take_targetStorageTypes(&mut self) -> super::hdfs::StorageTypesProto {
        self.targetStorageTypes.take().unwrap_or_else(|| super::hdfs::StorageTypesProto::new())
    }

    // required bytes liveBlockIndices = 6;


    pub fn get_liveBlockIndices(&self) -> &[u8] {
        match self.liveBlockIndices.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_liveBlockIndices(&mut self) {
        self.liveBlockIndices.clear();
    }

    pub fn has_liveBlockIndices(&self) -> bool {
        self.liveBlockIndices.is_some()
    }

    // Param is passed by value, moved
    pub fn set_liveBlockIndices(&mut self, v: ::std::vec::Vec<u8>) {
        self.liveBlockIndices = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_liveBlockIndices(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.liveBlockIndices.is_none() {
            self.liveBlockIndices.set_default();
        }
        self.liveBlockIndices.as_mut().unwrap()
    }

    // Take field
    pub fn take_liveBlockIndices(&mut self) -> ::std::vec::Vec<u8> {
        self.liveBlockIndices.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // required .hadoop.hdfs.ErasureCodingPolicyProto ecPolicy = 7;


    pub fn get_ecPolicy(&self) -> &super::hdfs::ErasureCodingPolicyProto {
        self.ecPolicy.as_ref().unwrap_or_else(|| <super::hdfs::ErasureCodingPolicyProto as ::protobuf::Message>::default_instance())
    }
    pub fn clear_ecPolicy(&mut self) {
        self.ecPolicy.clear();
    }

    pub fn has_ecPolicy(&self) -> bool {
        self.ecPolicy.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ecPolicy(&mut self, v: super::hdfs::ErasureCodingPolicyProto) {
        self.ecPolicy = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ecPolicy(&mut self) -> &mut super::hdfs::ErasureCodingPolicyProto {
        if self.ecPolicy.is_none() {
            self.ecPolicy.set_default();
        }
        self.ecPolicy.as_mut().unwrap()
    }

    // Take field
    pub fn take_ecPolicy(&mut self) -> super::hdfs::ErasureCodingPolicyProto {
        self.ecPolicy.take().unwrap_or_else(|| super::hdfs::ErasureCodingPolicyProto::new())
    }
}

impl ::protobuf::Message for BlockECReconstructionInfoProto {
    fn is_initialized(&self) -> bool {
        if self.block.is_none() {
            return false;
        }
        if self.sourceDnInfos.is_none() {
            return false;
        }
        if self.targetDnInfos.is_none() {
            return false;
        }
        if self.targetStorageUuids.is_none() {
            return false;
        }
        if self.targetStorageTypes.is_none() {
            return false;
        }
        if self.liveBlockIndices.is_none() {
            return false;
        }
        if self.ecPolicy.is_none() {
            return false;
        }
        for v in &self.block {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.sourceDnInfos {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.targetDnInfos {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.targetStorageUuids {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.targetStorageTypes {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.ecPolicy {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.block)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.sourceDnInfos)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.targetDnInfos)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.targetStorageUuids)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.targetStorageTypes)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.liveBlockIndices)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.ecPolicy)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.block.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.sourceDnInfos.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.targetDnInfos.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.targetStorageUuids.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.targetStorageTypes.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.liveBlockIndices.as_ref() {
            my_size += ::protobuf::rt::bytes_size(6, &v);
        }
        if let Some(ref v) = self.ecPolicy.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.block.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.sourceDnInfos.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.targetDnInfos.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.targetStorageUuids.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.targetStorageTypes.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.liveBlockIndices.as_ref() {
            os.write_bytes(6, &v)?;
        }
        if let Some(ref v) = self.ecPolicy.as_ref() {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BlockECReconstructionInfoProto {
        BlockECReconstructionInfoProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::hdfs::ExtendedBlockProto>>(
                "block",
                |m: &BlockECReconstructionInfoProto| { &m.block },
                |m: &mut BlockECReconstructionInfoProto| { &mut m.block },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::hdfs::DatanodeInfosProto>>(
                "sourceDnInfos",
                |m: &BlockECReconstructionInfoProto| { &m.sourceDnInfos },
                |m: &mut BlockECReconstructionInfoProto| { &mut m.sourceDnInfos },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::hdfs::DatanodeInfosProto>>(
                "targetDnInfos",
                |m: &BlockECReconstructionInfoProto| { &m.targetDnInfos },
                |m: &mut BlockECReconstructionInfoProto| { &mut m.targetDnInfos },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::hdfs::StorageUuidsProto>>(
                "targetStorageUuids",
                |m: &BlockECReconstructionInfoProto| { &m.targetStorageUuids },
                |m: &mut BlockECReconstructionInfoProto| { &mut m.targetStorageUuids },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::hdfs::StorageTypesProto>>(
                "targetStorageTypes",
                |m: &BlockECReconstructionInfoProto| { &m.targetStorageTypes },
                |m: &mut BlockECReconstructionInfoProto| { &mut m.targetStorageTypes },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "liveBlockIndices",
                |m: &BlockECReconstructionInfoProto| { &m.liveBlockIndices },
                |m: &mut BlockECReconstructionInfoProto| { &mut m.liveBlockIndices },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::hdfs::ErasureCodingPolicyProto>>(
                "ecPolicy",
                |m: &BlockECReconstructionInfoProto| { &m.ecPolicy },
                |m: &mut BlockECReconstructionInfoProto| { &mut m.ecPolicy },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<BlockECReconstructionInfoProto>(
                "BlockECReconstructionInfoProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static BlockECReconstructionInfoProto {
        static instance: ::protobuf::rt::LazyV2<BlockECReconstructionInfoProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(BlockECReconstructionInfoProto::new)
    }
}

impl ::protobuf::Clear for BlockECReconstructionInfoProto {
    fn clear(&mut self) {
        self.block.clear();
        self.sourceDnInfos.clear();
        self.targetDnInfos.clear();
        self.targetStorageUuids.clear();
        self.targetStorageTypes.clear();
        self.liveBlockIndices.clear();
        self.ecPolicy.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BlockECReconstructionInfoProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BlockECReconstructionInfoProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CodecProto {
    // message fields
    codec: ::protobuf::SingularField<::std::string::String>,
    coders: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CodecProto {
    fn default() -> &'a CodecProto {
        <CodecProto as ::protobuf::Message>::default_instance()
    }
}

impl CodecProto {
    pub fn new() -> CodecProto {
        ::std::default::Default::default()
    }

    // required string codec = 1;


    pub fn get_codec(&self) -> &str {
        match self.codec.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_codec(&mut self) {
        self.codec.clear();
    }

    pub fn has_codec(&self) -> bool {
        self.codec.is_some()
    }

    // Param is passed by value, moved
    pub fn set_codec(&mut self, v: ::std::string::String) {
        self.codec = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_codec(&mut self) -> &mut ::std::string::String {
        if self.codec.is_none() {
            self.codec.set_default();
        }
        self.codec.as_mut().unwrap()
    }

    // Take field
    pub fn take_codec(&mut self) -> ::std::string::String {
        self.codec.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required string coders = 2;


    pub fn get_coders(&self) -> &str {
        match self.coders.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_coders(&mut self) {
        self.coders.clear();
    }

    pub fn has_coders(&self) -> bool {
        self.coders.is_some()
    }

    // Param is passed by value, moved
    pub fn set_coders(&mut self, v: ::std::string::String) {
        self.coders = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_coders(&mut self) -> &mut ::std::string::String {
        if self.coders.is_none() {
            self.coders.set_default();
        }
        self.coders.as_mut().unwrap()
    }

    // Take field
    pub fn take_coders(&mut self) -> ::std::string::String {
        self.coders.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CodecProto {
    fn is_initialized(&self) -> bool {
        if self.codec.is_none() {
            return false;
        }
        if self.coders.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.codec)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.coders)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.codec.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(ref v) = self.coders.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.codec.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(ref v) = self.coders.as_ref() {
            os.write_string(2, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CodecProto {
        CodecProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "codec",
                |m: &CodecProto| { &m.codec },
                |m: &mut CodecProto| { &mut m.codec },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "coders",
                |m: &CodecProto| { &m.coders },
                |m: &mut CodecProto| { &mut m.coders },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CodecProto>(
                "CodecProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CodecProto {
        static instance: ::protobuf::rt::LazyV2<CodecProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CodecProto::new)
    }
}

impl ::protobuf::Clear for CodecProto {
    fn clear(&mut self) {
        self.codec.clear();
        self.coders.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CodecProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CodecProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x13erasurecoding.proto\x12\x0bhadoop.hdfs\x1a\nhdfs.proto\"Z\n\"SetEr\
    asureCodingPolicyRequestProto\x12\x10\n\x03src\x18\x01\x20\x02(\tR\x03sr\
    c\x12\"\n\x0cecPolicyName\x18\x02\x20\x01(\tR\x0cecPolicyName\"%\n#SetEr\
    asureCodingPolicyResponseProto\"&\n$GetErasureCodingPoliciesRequestProto\
    \"n\n%GetErasureCodingPoliciesResponseProto\x12E\n\necPolicies\x18\x01\
    \x20\x03(\x0b2%.hadoop.hdfs.ErasureCodingPolicyProtoR\necPolicies\"$\n\"\
    GetErasureCodingCodecsRequestProto\"T\n#GetErasureCodingCodecsResponsePr\
    oto\x12-\n\x05codec\x18\x01\x20\x03(\x0b2\x17.hadoop.hdfs.CodecProtoR\
    \x05codec\"6\n\"GetErasureCodingPolicyRequestProto\x12\x10\n\x03src\x18\
    \x01\x20\x02(\tR\x03src\"h\n#GetErasureCodingPolicyResponseProto\x12A\n\
    \x08ecPolicy\x18\x01\x20\x01(\x0b2%.hadoop.hdfs.ErasureCodingPolicyProto\
    R\x08ecPolicy\"m\n$AddErasureCodingPoliciesRequestProto\x12E\n\necPolici\
    es\x18\x01\x20\x03(\x0b2%.hadoop.hdfs.ErasureCodingPolicyProtoR\necPolic\
    ies\"w\n%AddErasureCodingPoliciesResponseProto\x12N\n\tresponses\x18\x01\
    \x20\x03(\x0b20.hadoop.hdfs.AddErasureCodingPolicyResponseProtoR\trespon\
    ses\"K\n%RemoveErasureCodingPolicyRequestProto\x12\"\n\x0cecPolicyName\
    \x18\x01\x20\x02(\tR\x0cecPolicyName\"(\n&RemoveErasureCodingPolicyRespo\
    nseProto\"K\n%EnableErasureCodingPolicyRequestProto\x12\"\n\x0cecPolicyN\
    ame\x18\x01\x20\x02(\tR\x0cecPolicyName\"(\n&EnableErasureCodingPolicyRe\
    sponseProto\"L\n&DisableErasureCodingPolicyRequestProto\x12\"\n\x0cecPol\
    icyName\x18\x01\x20\x02(\tR\x0cecPolicyName\")\n'DisableErasureCodingPol\
    icyResponseProto\"8\n$UnsetErasureCodingPolicyRequestProto\x12\x10\n\x03\
    src\x18\x01\x20\x02(\tR\x03src\"'\n%UnsetErasureCodingPolicyResponseProt\
    o\"H\n*GetECTopologyResultForPoliciesRequestProto\x12\x1a\n\x08policies\
    \x18\x01\x20\x03(\tR\x08policies\"u\n+GetECTopologyResultForPoliciesResp\
    onseProto\x12F\n\x08response\x18\x01\x20\x02(\x0b2*.hadoop.hdfs.ECTopolo\
    gyVerifierResultProtoR\x08response\"\xf4\x03\n\x1eBlockECReconstructionI\
    nfoProto\x125\n\x05block\x18\x01\x20\x02(\x0b2\x1f.hadoop.hdfs.ExtendedB\
    lockProtoR\x05block\x12E\n\rsourceDnInfos\x18\x02\x20\x02(\x0b2\x1f.hado\
    op.hdfs.DatanodeInfosProtoR\rsourceDnInfos\x12E\n\rtargetDnInfos\x18\x03\
    \x20\x02(\x0b2\x1f.hadoop.hdfs.DatanodeInfosProtoR\rtargetDnInfos\x12N\n\
    \x12targetStorageUuids\x18\x04\x20\x02(\x0b2\x1e.hadoop.hdfs.StorageUuid\
    sProtoR\x12targetStorageUuids\x12N\n\x12targetStorageTypes\x18\x05\x20\
    \x02(\x0b2\x1e.hadoop.hdfs.StorageTypesProtoR\x12targetStorageTypes\x12*\
    \n\x10liveBlockIndices\x18\x06\x20\x02(\x0cR\x10liveBlockIndices\x12A\n\
    \x08ecPolicy\x18\x07\x20\x02(\x0b2%.hadoop.hdfs.ErasureCodingPolicyProto\
    R\x08ecPolicy\":\n\nCodecProto\x12\x14\n\x05codec\x18\x01\x20\x02(\tR\
    \x05codec\x12\x16\n\x06coders\x18\x02\x20\x02(\tR\x06codersB?\n%org.apac\
    he.hadoop.hdfs.protocol.protoB\x13ErasureCodingProtos\xa0\x01\x01\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
